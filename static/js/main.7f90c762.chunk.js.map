{"version":3,"sources":["Guess.tsx","VideoPlayer.tsx","App.tsx","GuessResultUI.tsx","Score.tsx","reportWebVitals.ts","index.tsx"],"names":["search","a","fetch","replaceAll","response","json","tags","filter","count","Guess","on_guess_submitted","useState","matching_tags","set_matching_tags","set_search","useEffect","fetch_tags","then","id","Autocomplete","blurOnSelect","disableClearable","options","style","width","getOptionLabel","tag","name","onChange","event","value","onInputChange","_","renderInput","params","TextField","label","variant","TIMER_LENGTH","normalize","increment","page","VideoPlayer","TagType","current_video","set_current_video","play_next_tag","undefined","set_page","timer","set_timer","mounted","fetch_video","video","console","log","interval","setInterval","clearInterval","random","url","videos","file_url","file_ext","Fragment","CircularProgress","color","className","muted","preload","autoPlay","src","onEnded","next_page","GuessResultUI","guess_result","correct_answer","guess","Score","score","max_score","RESULT_DISPLAY_DURATION","COPYRIGHT","popularity_list","App","loading_progress","set_loading_progress","all_tags","set_all_tags","selected_tags","set_selected_tags","playing","set_playing","has_played","set_has_played","Map","guesses","set_guesses","set_score","index","set_index","guess_to_show","set_guess_to_show","progress","load","recalculate_score","reset","total","forEach","guess_matches","length","Button","disabled","onClick","map","max","min","sample","get","new_guesses","set","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","dark_theme","createMuiTheme","palette","type","primary","lightBlue","secondary","red","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.7f90c762.chunk.js","sourcesContent":["import { TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { ChangeEvent, useEffect, useState } from 'react';\nimport { Tag } from './App';\n\ntype Props = {\n  on_guess_submitted: (guess: string) => void,\n}\n\nconst Guess = ({ on_guess_submitted }: Props) => {\n  const [matching_tags, set_matching_tags] = useState<Tag[]>([]);\n  const [search, set_search] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (search) {\n      fetch_tags(search).then(set_matching_tags);\n    } else {\n      set_matching_tags([]);\n    }\n  }, [search]);\n\n  const on_guess_change = (event: ChangeEvent<{}>, value: Tag | null) => on_guess_submitted(value?.name ?? \"\");\n  \n  return (\n    <div id=\"guess\">\n      <Autocomplete\n        blurOnSelect\n        disableClearable\n        options={matching_tags}\n        style={{ width: 300 }}\n        getOptionLabel={(tag: Tag) => tag.name.replaceAll(\"_\", \" \")}\n        onChange={on_guess_change}\n        onInputChange={(_, value) => set_search(value)}\n        renderInput={(params) => <TextField {...params} label=\"Guess the title\" variant=\"filled\" />}\n      />\n    </div>\n  );\n};\n\nasync function fetch_tags(search: string) {\n  const response = await fetch('/api/tag.json?limit=25&type=3&order=count&name='+search.replaceAll(\" \", \"_\"));\n  const tags: Tag[] = await response.json() as Tag[];\n  return tags.filter(({ count }) => count > 0);\n}\n\nexport default Guess;","import { CircularProgress } from \"@material-ui/core\";\nimport { random } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tag, Video } from \"./App\";\n\ntype Props = {\n    tag: Tag,\n    current_video: Video | undefined,\n    set_current_video: (video: Video) => void,\n    play_next_tag: () => void,\n};\n\nconst VideoPlayer = ({ tag, current_video, set_current_video, play_next_tag }: Props) => {\n    const [page, set_page] = useState<number | undefined>(undefined);\n    const [timer, set_timer] = useState<number>(0);\n    \n    useEffect(() => {\n        let mounted = true;\n        fetch_video({ tag }).then(video => {\n            if (mounted) {\n                set_current_video(video);\n            }\n        });\n        return () => { mounted = false };\n    }, [tag, set_current_video]);\n\n    useEffect(() => {\n        let timer = 0;\n        const timer_step_size = 50;\n        console.log(\"starting interval\");\n        const interval = setInterval(() => {\n            if (timer >= TIMER_LENGTH) {\n                timer = 0;\n                set_timer(timer);\n                play_next_tag();\n            } else {\n                timer += timer_step_size;\n                set_timer(timer);\n            }\n        }, timer_step_size);\n        return () => {clearInterval(interval);console.log(\"clearing interval\");};\n    }, [tag]);\n\n    const play_next_video = () => {\n        const next_page = increment(page!, tag);\n        fetch_video({ tag, page: next_page }).then(video => {\n            set_current_video(video)\n        });\n    }\n\n    const fetch_video = async ({ tag, page = undefined }: { tag: Tag, page?: number }): Promise<Video> => {\n        page = page ?? random(tag.count);\n        const url = '/api/post.json?limit=1&page=' + page + '&tags=' + tag.name;\n        const response = await fetch(url);\n        const videos: VideoResponse[] = await response.json();\n\n        if (videoIsValid(videos[0])) {\n            set_page(page);\n            return {\n                url: videos[0].file_url,\n                id: videos[0].id,\n                tag: tag,\n            };\n        } else {\n            return fetch_video({\n                tag,\n                page: increment(page, tag)\n            });\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <CircularProgress color={normalize(timer) < 25 ? \"secondary\" : \"primary\"} key={tag.id} variant=\"determinate\" value={normalize(timer)} className=\"controls timer\" />\n            <video muted preload=\"auto\" autoPlay src={current_video?.url} onEnded={play_next_video} />\n        </React.Fragment>\n    )\n}\n\nconst TIMER_LENGTH = 30_000;\n\nconst normalize = (value: number) => (TIMER_LENGTH - value) * 100 / TIMER_LENGTH;\n\nconst increment = (page: number, tag: Tag) => (page + 1) % tag.count;\n\nfunction videoIsValid(video: any) {\n    return video\n        && video.file_url\n        && (video.file_ext === \"mp4\" || video.file_ext === \"webm\")\n        && video.id;\n}\n\ntype VideoResponse = {\n    file_url: string,\n    id: number,\n};\n\nexport default VideoPlayer;","import React, { useEffect, useState } from 'react';\nimport sample from 'lodash/sample';\nimport './App.css';\nimport Guess from './Guess';\nimport VideoPlayer from './VideoPlayer';\nimport Button from '@material-ui/core/Button';\nimport { Map } from 'immutable';\nimport GuessResultUI, { GuessResult } from './GuessResultUI';\nimport Score from './Score';\nimport { CircularProgress } from '@material-ui/core';\n\nenum TagType {\n  GENERAL = 0,\n  ARTIST = 1,\n  COPYRIGHT = 3,\n  CHARACTER = 4,\n}\n\nexport type Tag = {\n  ambiguous: boolean,\n  count: number,\n  id: number,\n  name: string,\n  type: TagType,\n};\n\nexport type Video = {\n  url: string,\n  id: number,\n  tag: Tag,\n};\n\ntype Popularity = { \"max\": number, \"min\": number };\n\nfunction App() {\n  const [loading_progress, set_loading_progress] = useState<number>(0);\n  const [all_tags, set_all_tags] = useState<Tag[]>([]);\n  const [selected_tags, set_selected_tags] = useState<Tag[]>([]);\n  const [playing, set_playing] = useState<boolean>(false);\n  const [has_played, set_has_played] = useState<boolean>(false);\n  const [guesses, set_guesses] = useState<Map<Tag, string>>(Map());\n  const [current_video, set_current_video] = useState<Video | undefined>(undefined);\n  const [score, set_score] = useState<number>(0);\n  const [index, set_index] = useState<number>(0);\n  const [guess_to_show, set_guess_to_show] = useState<Tag | undefined>(undefined);\n  const [timer, set_timer] = useState<number>(0);\n\n  useEffect(() => {\n    let progress = 10;\n    set_loading_progress(progress);\n    const load = setInterval(() => {\n      if (progress < 90) {\n        progress+=10;\n        set_loading_progress(progress);\n      } else {\n        clearInterval(load);\n      }\n    }, 100);\n    fetch_tags().then(tags => {\n      set_loading_progress(100);\n      set_all_tags(tags)\n    });\n    return () => clearInterval(load);\n  }, []);\n\n  useEffect(() => {\n    if (guess_to_show) {\n      recalculate_score(guesses);\n      const interval_duration = 50;\n      let timer = 0;\n      const interval = setInterval(() => {\n        if (timer >= RESULT_DISPLAY_DURATION) {\n          set_guess_to_show(undefined);\n          timer = 0;\n        } else {\n          timer += interval_duration;\n        }\n        set_timer(timer);\n      }, interval_duration);\n      return () => clearInterval(interval);\n    }\n  }, [guesses, guess_to_show])\n\n  const play_next = () => {\n    const tag = selected_tags[index];\n    set_guess_to_show(tag);\n\n    if ((index + 1) < selected_tags.length) {\n        set_index(index + 1);\n    } else {\n        reset();\n    }\n  }\n  \n  const start = () => {\n    set_selected_tags(choose_random_tags(all_tags));\n    set_playing(true);\n    set_has_played(true);\n    set_guesses(Map());\n    set_score(0);\n    set_index(0);\n  }\n\n  const reset = () => {\n    set_playing(false);\n    set_selected_tags([]);\n  }\n\n  const add_guess = (guess: string) => {\n    const tag = selected_tags[index];\n    if (tag) {\n      const new_guesses = guesses.set(tag, guess);\n      set_guesses(new_guesses);\n    }\n  }\n\n  const recalculate_score = (guesses: Map<Tag, string>) => {\n    let total = 0;\n    guesses.forEach((guess, tag) => {\n      if (guess_matches(guess, tag)) {\n        total += 1;\n      }\n    })\n    set_score(total);\n  }\n\n  return (\n    <React.Fragment>\n      {guess_to_show && <CircularProgress key={index} variant=\"determinate\" value={normalize(timer)} className=\"controls timer\" />}\n      {has_played && <Score score={score} max_score={index} />}\n      {all_tags.length === 0 && <CircularProgress variant=\"determinate\" value={loading_progress} />}\n      {!playing && <Button variant=\"contained\" disabled={all_tags.length === 0} onClick={start} id=\"start\">Start</Button>}\n      {playing && selected_tags.length > 0 && !guess_to_show && <VideoPlayer\n        tag={selected_tags[index]}\n        current_video={current_video}\n        set_current_video={set_current_video}\n        play_next_tag={play_next} />}\n      {guess_to_show && <GuessResultUI guess_result={{guess: guesses.get(guess_to_show), correct_answer: guess_to_show.name}} />}\n      {playing && !guess_to_show && <Guess on_guess_submitted={add_guess} />}\n    </React.Fragment>\n  );\n}\n\nconst RESULT_DISPLAY_DURATION = 3_500;\n\nconst normalize = (value: number) => value * 100 / RESULT_DISPLAY_DURATION;\n\nfunction guess_matches(guess: string | undefined, tag: Tag) {\n  return guess === tag.name;\n}\n\nasync function fetch_tags() {\n  const response = await fetch('/api/tag.json?limit=0&order=count&type='+TagType.COPYRIGHT);\n  const tags: Tag[] = await response.json() as Tag[];\n  return tags.filter(({ count }) => count > 0);\n}\n\nfunction choose_random_tags(tags: Tag[]): Tag[] {\n  return popularity_list.map(({ max, min }) =>\n    sample(tags.filter(({ count }) => max >= count && count >= min))\n  ) as Tag[];\n}\n\nconst popularity_list: Popularity[] = [\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 1, \"min\": 1 },\n];\n\nexport default App;\n","import React from 'react';\n\nconst GuessResultUI = ({guess_result}: {guess_result: GuessResult | undefined}) => {\n    if (guess_result === undefined) {\n        return null;\n    }\n    if (guess_result.correct_answer === guess_result.guess) {\n        return <p id=\"guess-result\" className=\"controls correct\">{guess_result.correct_answer.replaceAll(\"_\", \" \")} &#10003;</p>\n    } else if (guess_result.guess) {\n        return (\n            <div id=\"guess-result\" className=\"controls wrong\">\n                <p id=\"incorrect-guess\">{guess_result.guess.replaceAll(\"_\", \" \")}</p>\n                <p>{guess_result.correct_answer.replaceAll(\"_\", \" \")}</p>\n            </div>\n        );\n    } else {\n        return (\n            <div id=\"guess-result\" className=\"controls wrong\">\n                <p>{guess_result.correct_answer.replaceAll(\"_\", \" \")}</p>\n            </div>\n        );\n    }\n    \n}\n\nexport type GuessResult = {\n    guess?: string,\n    correct_answer: string,\n}\n\nexport default GuessResultUI;","import React from 'react';\n\nconst Score = ({score, max_score}: {score: number, max_score: number}) => <p id=\"score\" className=\"controls\">Correct: {score}/{max_score}</p>\n\nexport default Score;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { lightBlue, red } from '@material-ui/core/colors';\n\nconst dark_theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: lightBlue,\n    secondary: red\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={dark_theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}