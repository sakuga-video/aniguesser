{"version":3,"sources":["Guess.tsx","Score.tsx","VideoPlayer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Guess","id","className","list","autoComplete","placeholder","Score","score","fetch_random_video","a","tag","index","undefined","random_number","random","count","url","name","fetch","response","json","videos","videoIsValid","video","file_url","file_ext","VideoPlayer","tags","useState","set_index","set_video","useEffect","length","then","Fragment","muted","preload","autoPlay","src","onEnded","replaceAll","filter","TagType","popularity_list","App","set_tags","random_tags","set_random_tags","playing","set_playing","fetch_tags","type","COPYRIGHT","Button","variant","disabled","onClick","map","max","min","sample","choose_random_tags","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3ed8ca9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Guess = () => (\n    <div id=\"main-controls\" className=\"controls\">\n    <input list=\"tags\" autoComplete=\"off\" placeholder=\"Guess the title\" />\n    <datalist id=\"tags\"></datalist>\n  </div>\n);\n\nexport default Guess;","import React from 'react';\n\nconst Score = ({score}: {score: number}) => <p id=\"score\">Score: {score}</p>\n\nexport default Score;","import { random } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tag } from \"./App\";\n\nconst VideoPlayer = ({ tags }: { tags: Tag[] }) => {\n    const [index, set_index] = useState<number>(0);\n    const [video, set_video] = useState<any>(undefined);\n\n    useEffect(() => {\n        if (tags.length > 0) {\n            fetch_random_video({ tag: tags[index] }).then(set_video);\n        }\n    }, [tags, index]);\n\n    const play_next = () => {\n        set_index((index + 1) % tags.length);\n    }\n\n    return (\n        <React.Fragment>\n            <video muted preload=\"auto\" autoPlay src={video?.file_url} onEnded={play_next} />\n            <p>{tags[index].name.replaceAll(\"_\", \" \")}</p>\n            <p>{tags[index].count}</p>\n        </React.Fragment>\n    )\n}\n\nasync function fetch_random_video({ tag, index = undefined }: { tag: Tag, index?: number }): Promise<any> {\n    const random_number = random(tag.count);\n    const url = '/api/post.json?limit=1&page=' + (index ?? random_number) + '&tags=' + tag.name;\n    const response = await fetch(url);\n    const videos = await response.json();\n    const video = videos[0];\n\n    if (videoIsValid(video)) {\n        return video;\n    } else {\n        return fetch_random_video({\n            tag,\n            index: (random_number + 1) % tag.count\n        });\n    }\n}\n\nfunction videoIsValid(video: any) {\n    return video\n        && video.file_url\n        && (video.file_ext === \"mp4\" || video.file_ext === \"webm\")\n        && video.id;\n}\n\nexport default VideoPlayer;","import React, { useEffect, useState } from 'react';\nimport { setEmitFlags } from 'typescript';\nimport sample from 'lodash/sample';\nimport './App.css';\nimport Guess from './Guess';\nimport Score from './Score';\nimport VideoPlayer from './VideoPlayer';\nimport Button from '@material-ui/core/Button';\nimport { random } from 'lodash';\n\nfunction App() {\n  const [tags, set_tags] = useState<Tag[]>([]);\n  const [random_tags, set_random_tags] = useState<Tag[]>([]);\n  const [videos, set_videos] = useState<Video[]>([]);\n  const [currentVideo, set_current_video] = useState<Video | undefined>(undefined);\n  const [guess, set_guess] = useState<string>(\"\");\n  const [score, set_score] = useState<number>(0);\n  const [playing, set_playing] = useState<boolean>(false);\n\n  useEffect(() => {\n    fetch_tags().then(tags =>\n      set_tags(tags.filter(tag => tag.type === TagType.COPYRIGHT))\n    );\n  }, [])\n\n  const start = () => {\n    set_random_tags(choose_random_tags(tags));\n    set_playing(true);\n  }\n\n  return (\n    <div id=\"videocontainer\" className=\"fade-out\">\n      <Score score={score} />\n      {!playing && <Button variant=\"contained\" disabled={tags.length === 0} onClick={start}>Start</Button>}\n      {playing && <VideoPlayer tags={random_tags} />}\n      <Guess />\n    </div>\n  );\n}\n\nasync function fetch_tags() {\n  const response = await fetch('/api/tag.json?limit=0&order=count');\n  const tags: Tag[] = await response.json() as Tag[];\n  return tags.filter(({count}) => count > 0);\n}\n\nfunction choose_random_tags(tags: Tag[]): Tag[] {\n  return popularity_list.map(({max, min}) =>\n    sample(tags.filter(({count}) => max >= count && count >= min))\n  ) as Tag[];\n}\n\nconst popularity_list: Popularity[] = [\n  {\"max\": 100000, \"min\": 500},\n  {\"max\": 100000, \"min\": 500},\n  {\"max\": 100000, \"min\": 500},\n  {\"max\": 500, \"min\": 100},\n  {\"max\": 500, \"min\": 100},\n  {\"max\": 500, \"min\": 100},\n  {\"max\": 500, \"min\": 100},\n  {\"max\": 500, \"min\": 100},\n  {\"max\": 500, \"min\": 100},\n  {\"max\": 100, \"min\": 25},\n  {\"max\": 100, \"min\": 25},\n  {\"max\": 100, \"min\": 25},\n  {\"max\": 100, \"min\": 25},\n  {\"max\": 25, \"min\": 10},\n  {\"max\": 25, \"min\": 10},\n  {\"max\": 25, \"min\": 10},\n  {\"max\": 25, \"min\": 10},\n  {\"max\": 1, \"min\": 1},\n];\n\ntype Video = {\n  url: string,\n  name: string,\n  popularity: number,\n};\n\nexport type Tag = {\n  ambiguous: boolean,\n  count: number,\n  id: number,\n  name: string,\n  type: TagType,\n};\n\ntype Popularity = {\"max\": number, \"min\": number};\n\nenum TagType {\n  GENERAL = 0,\n  ARTIST = 1,\n  COPYRIGHT = 3,\n  CHARACTER = 4,\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}