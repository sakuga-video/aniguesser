{"version":3,"sources":["GuessInput.tsx","SakugaAPI.tsx","VideoPlayer.tsx","App.tsx","GuessResultUI.tsx","Score.tsx","GuessMatcher.ts","reportWebVitals.ts","index.tsx"],"names":["match_sorter_options","keys","tag","name","baseSort","tag_a","tag_b","item","count","filter_options","options","inputValue","matchSorter","slice","GuessInput","on_guess_changed","on_guess_submitted","all_tags","id","onSubmit","event","preventDefault","Autocomplete","selectOnFocus","clearOnBlur","autoHighlight","autoComplete","disableClearable","clearOnEscape","style","width","filterOptions","getOptionLabel","onChange","value","renderInput","params","TextField","label","variant","autoFocus","IconButton","type","Icon","a","fetch","API_URL","TagType","COPYRIGHT","response","json","tags","map","jsonTag","ambiguous","replaceAll","filter","fetch_video","page","undefined","random","url","videoIsValid","videos","data","file_url","increment","video","file_ext","TIMER_LENGTH","normalize","VideoPlayer","current_video","set_current_video","play_next_tag","useState","set_page","timer","set_timer","useEffect","mounted","then","video_page","console","log","interval","setInterval","clearInterval","Fragment","CircularProgress","color","className","muted","preload","autoPlay","src","onEnded","next_page","GuessResultUI","guess_result","is_correct","guess","correct_answer","Score","score","max_score","Matches","Fuse","answer","includeScore","threshold","distance","search","length","RESULT_DISPLAY_DURATION","guess_matches","Matcher","popularity_list","App","loading_progress","set_loading_progress","set_all_tags","selected_tags","set_selected_tags","playing","set_playing","has_played","set_has_played","Map","guesses","set_guesses","set_score","index","set_index","guess_to_show","set_guess_to_show","progress","load","fetch_tags","recalculate_score","play_next","reset","total","forEach","Button","disabled","onClick","max","min","sample","get","new_guesses","set","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","dark_theme","createMuiTheme","palette","primary","lightBlue","secondary","red","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.66d198e8.chunk.js","sourcesContent":["import { Icon, IconButton, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { ChangeEvent, FormEvent } from 'react';\nimport { Tag } from './App';\nimport { matchSorter, MatchSorterOptions } from 'match-sorter';\n\ntype Props = {\n  on_guess_changed: (guess: string) => void,\n  on_guess_submitted: () => void,\n  all_tags: Tag[],\n}\n\nconst GuessInput = ({\n    on_guess_changed,\n    on_guess_submitted,\n    all_tags\n  }: Props) => {\n  const on_guess_change = (event: ChangeEvent<{}>, value: Tag | null) => on_guess_changed(value?.name ?? \"\");\n  \n  const on_form_submitted = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    on_guess_submitted();\n  }\n\n  return (\n    <form id=\"guess\" onSubmit={on_form_submitted}>\n      <Autocomplete\n        selectOnFocus\n        clearOnBlur\n        autoHighlight\n        autoComplete\n        disableClearable\n        clearOnEscape\n        options={all_tags}\n        style={{ width: 300 }}\n        filterOptions={filter_options}\n        getOptionLabel={tag => tag.name}\n        onChange={on_guess_change}\n        renderInput={(params) => <TextField {...params} label=\"Guess the title\" variant=\"filled\" autoFocus />}\n      />\n      <IconButton type=\"submit\">\n        <Icon>send</Icon>\n      </IconButton>\n    </form>\n  );\n};\n\nconst match_sorter_options: MatchSorterOptions<Tag> = {\n  keys: [tag => tag.name],\n  baseSort: (tag_a, tag_b) => tag_b.item.count - tag_a.item.count,\n};\n\nconst filter_options = (options: Tag[], { inputValue }: { inputValue: string}) =>\n  inputValue ? matchSorter(options, inputValue, match_sorter_options).slice(0, 100) : [];\n  \nexport default GuessInput;","import { Tag, TagType, Video } from \"./App\";\nimport { random } from \"lodash\";\n\nconst API_URL = \"/api/\";\n\ntype VideoResponse = {\n    file_url: string,\n    id: number,\n};\n\ntype Page<Data> = {\n    data: Data,\n    page: number,\n}\n\nexport async function fetch_tags() {\n    const response = await fetch(API_URL+'tag.json?limit=0&order=count&type='+TagType.COPYRIGHT);\n    const tags: Tag[] = (await response.json()).map((jsonTag: any) => ({\n      ambiguous: jsonTag.ambiguous,\n      count: jsonTag.count,\n      id: jsonTag.id,\n      name: jsonTag.name.replaceAll(\"_\", \" \"),\n      type: jsonTag.type,\n    }));\n    return tags.filter(({ count }) => count > 0);\n}\n\nexport async function fetch_video({ tag, page = undefined }: { tag: Tag, page?: number }): Promise<Page<Video>> {\n    page = page ?? random(tag.count);\n    const url = API_URL+'post.json?limit=1&page=' + page + '&tags=' + tag.name.replaceAll(\" \", \"_\");\n    const response = await fetch(url);\n    const videos: VideoResponse[] = await response.json();\n\n    if (videoIsValid(videos[0])) {\n        return {\n            data: {\n                url: videos[0].file_url,\n                id: videos[0].id,\n                tag: tag,\n            },\n            page\n        };\n    } else {\n        return fetch_video({\n            tag,\n            page: increment(page, tag)\n        });\n    }\n}\n\nexport const increment = (page: number, tag: Tag) => (page + 1) % tag.count;\n\nfunction videoIsValid(video: any) {\n    return video\n        && video.file_url\n        && (video.file_ext === \"mp4\" || video.file_ext === \"webm\")\n        && video.id;\n}","import { CircularProgress } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tag, Video } from \"./App\";\nimport { fetch_video, increment } from \"./SakugaAPI\";\n\ntype Props = {\n    tag: Tag,\n    current_video: Video | undefined,\n    set_current_video: (video: Video) => void,\n    play_next_tag: () => void,\n};\n\nconst VideoPlayer = ({ tag, current_video, set_current_video, play_next_tag }: Props) => {\n    const [page, set_page] = useState<number | undefined>(undefined);\n    const [timer, set_timer] = useState<number>(0);\n    \n    useEffect(() => {\n        let mounted = true;\n        fetch_video({ tag }).then(video_page => {\n            if (mounted) {\n                set_current_video(video_page.data);\n                set_page(video_page.page);\n            }\n        });\n        return () => { mounted = false };\n    }, [tag, set_current_video]);\n\n    useEffect(() => {\n        let timer = 0;\n        const timer_step_size = 50;\n        console.log(\"starting interval\");\n        const interval = setInterval(() => {\n            if (timer >= TIMER_LENGTH) {\n                timer = 0;\n                set_timer(timer);\n                play_next_tag();\n            } else {\n                timer += timer_step_size;\n                set_timer(timer);\n            }\n        }, timer_step_size);\n        return () => {clearInterval(interval);console.log(\"clearing interval\");};\n    }, [tag]);\n\n    const play_next_video = () => {\n        const next_page = increment(page!, tag);\n        fetch_video({ tag, page: next_page }).then(video_page => {\n            set_current_video(video_page.data);\n            set_page(video_page.page);\n        });\n    }\n\n    return (\n        <React.Fragment>\n            <CircularProgress color={normalize(timer) < 25 ? \"secondary\" : \"primary\"} key={tag.id} variant=\"determinate\" value={normalize(timer)} className=\"controls timer\" />\n            <video muted preload=\"auto\" autoPlay src={current_video?.url} onEnded={play_next_video} />\n        </React.Fragment>\n    )\n}\n\nconst TIMER_LENGTH = 30_000;\n\nconst normalize = (value: number) => (TIMER_LENGTH - value) * 100 / TIMER_LENGTH;\n\nexport default VideoPlayer;","import React, { useEffect, useState } from 'react';\nimport sample from 'lodash/sample';\nimport './App.css';\nimport GuessInput from './GuessInput';\nimport VideoPlayer from './VideoPlayer';\nimport Button from '@material-ui/core/Button';\nimport { Map } from 'immutable';\nimport GuessResultUI from './GuessResultUI';\nimport Score from './Score';\nimport { CircularProgress } from '@material-ui/core';\nimport Matcher from './GuessMatcher';\nimport { fetch_tags } from './SakugaAPI';\n\nexport enum TagType {\n  GENERAL = 0,\n  ARTIST = 1,\n  COPYRIGHT = 3,\n  CHARACTER = 4,\n}\n\nexport type Tag = {\n  readonly ambiguous: boolean,\n  readonly count: number,\n  readonly id: number,\n  readonly name: string,\n  readonly type: TagType,\n};\n\nexport type Video = {\n  readonly url: string,\n  readonly id: number,\n  readonly tag: Tag,\n};\n\ntype Popularity = { \"max\": number, \"min\": number };\n\nfunction App() {\n  const [loading_progress, set_loading_progress] = useState<number>(0);\n  const [all_tags, set_all_tags] = useState<Tag[]>([]);\n  const [selected_tags, set_selected_tags] = useState<Tag[]>([]);\n  const [playing, set_playing] = useState<boolean>(false);\n  const [has_played, set_has_played] = useState<boolean>(false);\n  const [guesses, set_guesses] = useState<Map<Tag, string>>(Map());\n  const [current_video, set_current_video] = useState<Video | undefined>(undefined);\n  const [score, set_score] = useState<number>(0);\n  const [index, set_index] = useState<number>(0);\n  const [guess_to_show, set_guess_to_show] = useState<Tag | undefined>(undefined);\n  const [timer, set_timer] = useState<number>(0);\n\n  useEffect(() => {\n    let progress = 10;\n    set_loading_progress(progress);\n    const load = setInterval(() => {\n      if (progress < 90) {\n        progress+=10;\n        set_loading_progress(progress);\n      } else {\n        clearInterval(load);\n      }\n    }, 100);\n    fetch_tags().then(tags => {\n      set_loading_progress(100);\n      set_all_tags(tags);\n    });\n    return () => clearInterval(load);\n  }, []);\n\n  useEffect(() => {\n    if (guess_to_show) {\n      recalculate_score(guesses);\n      const interval_duration = 50;\n      let timer = 0;\n      const interval = setInterval(() => {\n        if (timer >= RESULT_DISPLAY_DURATION) {\n          set_guess_to_show(undefined);\n          timer = 0;\n        } else {\n          timer += interval_duration;\n        }\n        set_timer(timer);\n      }, interval_duration);\n      return () => clearInterval(interval);\n    }\n  }, [guesses, guess_to_show]);\n\n  const play_next = () => {\n    const tag = selected_tags[index];\n    set_guess_to_show(tag);\n\n    if ((index + 1) < selected_tags.length) {\n        set_index(index + 1);\n    } else {\n        reset();\n    }\n  }\n  \n  const start = () => {\n    set_selected_tags(choose_random_tags(all_tags));\n    set_playing(true);\n    set_has_played(true);\n    set_guesses(Map());\n    set_score(0);\n    set_index(0);\n  }\n\n  const reset = () => {\n    set_playing(false);\n    set_selected_tags([]);\n  }\n\n  const set_guess = (guess: string) => {\n    const tag = selected_tags[index];\n    if (tag) {\n      const new_guesses = guesses.set(tag, guess);\n      set_guesses(new_guesses);\n    }\n  }\n\n  const lock_in_guess = () => {\n    const tag = selected_tags[index];\n    const guess = guesses.get(tag);\n    if (guess) {\n      play_next();\n    }\n  }\n\n  const recalculate_score = (guesses: Map<Tag, string>) => {\n    let total = 0;\n    guesses.forEach((guess, tag) => {\n      if (guess_matches(guess, tag)) {\n        total += 1;\n      }\n    })\n    set_score(total);\n  }\n\n  return (\n    <React.Fragment>\n      {guess_to_show && <CircularProgress key={index} variant=\"determinate\" value={normalize(timer)} className=\"controls timer\" />}\n      {has_played && <Score score={score} max_score={index} />}\n      {all_tags.length === 0 && <CircularProgress variant=\"determinate\" value={loading_progress} />}\n      {!playing && <Button variant=\"contained\" disabled={all_tags.length === 0} onClick={start} id=\"start\">Start</Button>}\n      {playing && selected_tags.length > 0 && !guess_to_show && <VideoPlayer\n        tag={selected_tags[index]}\n        current_video={current_video}\n        set_current_video={set_current_video}\n        play_next_tag={play_next} />}\n      {\n        guess_to_show &&\n        <GuessResultUI\n          guess_result={{\n            guess: guesses.get(guess_to_show),\n            correct_answer: guess_to_show.name,\n            is_correct: guess_matches(guesses.get(guess_to_show), guess_to_show),\n          }} />\n      }\n      {\n        playing && !guess_to_show &&\n        <GuessInput\n          on_guess_changed={set_guess}\n          on_guess_submitted={lock_in_guess}\n          all_tags={all_tags}\n        />\n      }\n    </React.Fragment>\n  );\n}\n\nconst RESULT_DISPLAY_DURATION = 4_000;\n\nconst normalize = (value: number) => value * 100 / RESULT_DISPLAY_DURATION;\n\nfunction guess_matches(guess: string | undefined, tag: Tag) {\n  return guess !== undefined && Matcher({guess, answer: tag.name});\n}\n\nfunction choose_random_tags(tags: Tag[]): Tag[] {\n  return popularity_list.map(({ max, min }) =>\n    sample(tags.filter(({ count }) => max >= count && count >= min))\n  ) as Tag[];\n}\n\nconst popularity_list: Popularity[] = [\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 1, \"min\": 1 },\n];\n\nexport default App;\n","import React from 'react';\n\nconst GuessResultUI = ({guess_result}: {guess_result: GuessResult | undefined}) => {\n    if (guess_result === undefined) {\n        return null;\n    }\n    if (guess_result.is_correct && guess_result.guess) {\n        return (\n            <div id=\"guess-result\" className=\"controls correct\">\n                <p>{guess_result.guess}</p>\n                {\n                    guess_result.guess !== guess_result.correct_answer &&\n                    <p>({guess_result.correct_answer})</p>\n                }\n                <h1>🎉 is correct 🎊</h1>\n            </div>\n        )\n    } else if (guess_result.guess) {\n        return (\n            <div id=\"guess-result\" className=\"controls wrong\">\n                <p id=\"incorrect-guess\">{guess_result.guess}</p>\n                <h1>is incorrect</h1>\n                <p>It was {guess_result.correct_answer}</p>\n            </div>\n        );\n    } else {\n        return (\n            <div id=\"guess-result\" className=\"controls wrong\">\n                <h1>No guess</h1>\n                <p>It was {guess_result.correct_answer}</p>\n            </div>\n        );\n    }\n    \n}\n\nexport type GuessResult = {\n    guess?: string,\n    correct_answer: string,\n    is_correct: boolean,\n}\n\nexport default GuessResultUI;","import React from 'react';\n\nconst Score = ({score, max_score}: {score: number, max_score: number}) => <p id=\"score\" className=\"controls\">Correct: {score}/{max_score}</p>\n\nexport default Score;","import Fuse from \"fuse.js\";\n\nconst Matches = (guess: Guess) => {\n    const options = {\n        includeScore: true,\n        threshold: 0.1,\n        distance: 0,\n      };\n    const fuse = new Fuse([guess.answer], options);\n    const search = fuse.search(guess.guess);\n    return search.length > 0;\n}\n\nexport type Guess = {\n    answer: string,\n    guess: string,\n}\n\nexport default Matches;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { lightBlue, red } from '@material-ui/core/colors';\n\nconst dark_theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: lightBlue,\n    secondary: red\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={dark_theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}