{"version":3,"sources":["Guess.tsx","VideoPlayer.tsx","App.tsx","GuessResultUI.tsx","Score.tsx","reportWebVitals.ts","index.tsx"],"names":["Guess","all_tags","on_guess_submitted","id","className","Autocomplete","blurOnSelect","disableClearable","options","style","width","getOptionLabel","tag","name","replaceAll","onChange","event","value","renderInput","params","TextField","label","fetch_random_video","a","index","undefined","random_number","random","count","url","fetch","response","json","videoIsValid","videos","file_url","video","file_ext","VideoPlayer","TagType","tags","on_end","current_video","set_current_video","set_index","play_next","useEffect","mounted","length","then","on_keyup","key","window","addEventListener","removeEventListener","Fragment","muted","preload","autoPlay","src","onEnded","GuessResultUI","guess_result","is_correct","correct_answer","guess","Score","score","max_score","guess_matches","filter","popularity_list","App","useState","set_all_tags","selected_tags","set_selected_tags","playing","set_playing","has_played","set_has_played","Map","guesses","set_guesses","set_score","set_guess_result","fetch_tags","type","COPYRIGHT","setTimeout","reset","recalculate_score","total","forEach","Button","variant","disabled","onClick","map","max","min","sample","new_guesses","set","show_guess_result","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","dark_theme","createMuiTheme","palette","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.d98b4a99.chunk.js","sourcesContent":["import { Button, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\nimport { Tag } from './App';\n\ntype Props = {\n  all_tags: Tag[],\n  on_guess_submitted: (guess: string) => void,\n}\n\nconst Guess = ({all_tags, on_guess_submitted }: Props) => {\n  const on_guess_change = (event: ChangeEvent<{}>, value: Tag | null) => on_guess_submitted(value?.name ?? \"\");\n  \n  return (\n    <div id=\"guess\" className=\"controls\">\n      <Autocomplete\n        blurOnSelect\n        disableClearable\n        options={all_tags}\n        style={{ width: 300 }}\n        getOptionLabel={(tag: Tag) => tag.name.replaceAll(\"_\", \" \")}\n        onChange={on_guess_change}\n        renderInput={(params) => <TextField {...params} label=\"Guess the title\" />}\n      />\n    </div>\n  );\n};\n\nexport default Guess;","import { random } from \"lodash\";\nimport React, { useEffect } from \"react\";\nimport { Tag, Video } from \"./App\";\n\ntype Props = {\n    tags: Tag[],\n    on_end: () => void,\n    current_video: Video | undefined,\n    set_current_video: (video: Video) => void,\n    index: number,\n    set_index: (index: number) => void,\n    play_next: () => void,\n};\n\nconst VideoPlayer = ({ tags, on_end, current_video, set_current_video, index, set_index, play_next }: Props) => {\n\n    useEffect(() => {\n        let mounted = true;\n        if (tags.length > 0) {\n            fetch_random_video({ tag: tags[index] }).then(video => {\n                if (mounted) {\n                    set_current_video(video)\n                }\n            });\n        }\n        return () => {\n            mounted = false;\n        };\n    }, [tags, index, set_current_video]);\n\n    useEffect(() => {\n        const on_keyup = (event: KeyboardEvent) => {\n            if (event.key === \"ArrowRight\") {\n                play_next();\n            }\n        };\n\n        if (window){\n            window.addEventListener(\"keyup\", on_keyup);\n        }\n        return () => {\n          window.removeEventListener(\"keyup\", on_keyup);\n        }\n    }, [index, tags, on_end, set_index, play_next]);\n\n    return (\n        <React.Fragment>\n            <video muted preload=\"auto\" autoPlay src={current_video?.url} onEnded={play_next} />\n        </React.Fragment>\n    )\n}\n\nasync function fetch_random_video({ tag, index = undefined }: { tag: Tag, index?: number }): Promise<Video> {\n    const random_number = random(tag.count);\n    const url = '/api/post.json?limit=1&page=' + (index ?? random_number) + '&tags=' + tag.name;\n    const response = await fetch(url);\n    const videos: VideoResponse[] = await response.json();\n\n    if (videoIsValid(videos[0])) {\n        return {\n            url: videos[0].file_url,\n            id: videos[0].id,\n            tag: tag,\n        };\n    } else {\n        return fetch_random_video({\n            tag,\n            index: (random_number + 1) % tag.count\n        });\n    }\n}\n\nfunction videoIsValid(video: any) {\n    return video\n        && video.file_url\n        && (video.file_ext === \"mp4\" || video.file_ext === \"webm\")\n        && video.id;\n}\n\ntype VideoResponse = {\n    file_url: string,\n    id: number,\n};\n\nexport default VideoPlayer;","import React, { useEffect, useState } from 'react';\nimport sample from 'lodash/sample';\nimport './App.css';\nimport Guess from './Guess';\nimport VideoPlayer from './VideoPlayer';\nimport Button from '@material-ui/core/Button';\nimport { Map } from 'immutable';\nimport GuessResultUI, { GuessResult } from './GuessResultUI';\nimport Score from './Score';\n\nenum TagType {\n  GENERAL = 0,\n  ARTIST = 1,\n  COPYRIGHT = 3,\n  CHARACTER = 4,\n}\n\nexport type Tag = {\n  ambiguous: boolean,\n  count: number,\n  id: number,\n  name: string,\n  type: TagType,\n};\n\nexport type Video = {\n  url: string,\n  id: number,\n  tag: Tag,\n};\n\ntype Popularity = { \"max\": number, \"min\": number };\n\nfunction App() {\n  const [all_tags, set_all_tags] = useState<Tag[]>([]);\n  const [selected_tags, set_selected_tags] = useState<Tag[]>([]);\n  const [playing, set_playing] = useState<boolean>(false);\n  const [has_played, set_has_played] = useState<boolean>(false);\n  const [guesses, set_guesses] = useState<Map<Video, string>>(Map());\n  const [current_video, set_current_video] = useState<Video | undefined>(undefined);\n  const [score, set_score] = useState<number>(0);\n  const [index, set_index] = useState<number>(0);\n  const [guess_result, set_guess_result] = useState<GuessResult | undefined>(undefined);\n\n  useEffect(() => {\n    fetch_tags().then(tags =>\n      set_all_tags(tags.filter(tag => tag.type === TagType.COPYRIGHT))\n    );\n  }, []);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => set_guess_result(undefined), 2_500);\n  }, [guess_result])\n\n  const play_next = () => {\n    if ((index + 1) < selected_tags.length) {\n        set_index(index + 1);\n    } else {\n        reset();\n    }\n  }\n  \n  const start = () => {\n    set_selected_tags(choose_random_tags(all_tags));\n    set_playing(true);\n    set_has_played(true);\n    set_guesses(Map());\n    set_score(0);\n    set_index(0);\n  }\n\n  const reset = () => {\n    set_playing(false);\n    set_selected_tags([]);\n  }\n\n  const show_guess_result = (video: Video, guess:string) => {\n    set_guess_result({\n      guess,\n      correct_answer: video.tag.name,\n      is_correct: guess_matches(guess, video),\n    })\n  }\n  \n\n  const add_guess = (guess: string) => {\n    if (current_video !== undefined) {\n      const new_guesses = guesses.set(current_video, guess);\n      show_guess_result(current_video, guess);\n      set_guesses(new_guesses);\n      recalculate_score(new_guesses);\n      play_next();\n    }\n  }\n\n  const recalculate_score = (guesses: Map<Video, string>) => {\n    let total = 0;\n    guesses.forEach((guess, video) => {\n      if (guess_matches(guess, video)) {\n        total += 1;\n      }\n    })\n    set_score(total);\n  }\n\n  return (\n    <React.Fragment>\n      {has_played && <Score score={score} max_score={index} />}\n      {!playing && !guess_result && <Button variant=\"contained\" disabled={all_tags.length === 0} onClick={start} id=\"start\">Start</Button>}\n      {playing && !guess_result && <VideoPlayer\n        tags={selected_tags}\n        on_end={reset}\n        current_video={current_video}\n        set_current_video={set_current_video}\n        index={index}\n        set_index={set_index}\n        play_next={play_next} />}\n      <GuessResultUI guess_result={guess_result} />\n      {playing && !guess_result && <Guess on_guess_submitted={add_guess} all_tags={all_tags} />}\n    </React.Fragment>\n  );\n}\n\nfunction guess_matches(guess: string, video: Video) {\n  return guess === video.tag.name;\n}\n\nasync function fetch_tags() {\n  const response = await fetch('/api/tag.json?limit=0&order=count');\n  const tags: Tag[] = await response.json() as Tag[];\n  return tags.filter(({ count }) => count > 0);\n}\n\nfunction choose_random_tags(tags: Tag[]): Tag[] {\n  return popularity_list.map(({ max, min }) =>\n    sample(tags.filter(({ count }) => max >= count && count >= min))\n  ) as Tag[];\n}\n\nconst popularity_list: Popularity[] = [\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 1, \"min\": 1 },\n];\n\nexport default App;\n","import React from 'react';\n\nconst GuessResultUI = ({guess_result}: {guess_result: GuessResult | undefined}) => {\n    if (guess_result === undefined) {\n        return null;\n    }\n    if (guess_result.is_correct) {\n        return <p id=\"guess-result\" className=\"controls correct\">{guess_result.correct_answer.replaceAll(\"_\", \" \")} &#10003;</p>\n    } else {\n        return (\n            <div id=\"guess-result\" className=\"controls wrong\">\n                <p id=\"incorrect-guess\">{guess_result.guess.replaceAll(\"_\", \" \")}</p>\n                <p>{guess_result.correct_answer.replaceAll(\"_\", \" \")}</p>\n            </div>\n        )\n    }\n    \n}\n\nexport type GuessResult = {\n    guess: string,\n    correct_answer: string,\n    is_correct: boolean,\n}\n\nexport default GuessResultUI;","import React from 'react';\n\nconst Score = ({score, max_score}: {score: number, max_score: number}) => <p id=\"score\" className=\"controls\">Correct: {score}/{max_score}</p>\n\nexport default Score;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst dark_theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={dark_theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}