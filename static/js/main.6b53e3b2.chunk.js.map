{"version":3,"sources":["appSlice.ts","GuessInput.tsx","SakugaAPI.tsx","VideoPlayer.tsx","App.tsx","GuessResultUI.tsx","Score.tsx","GuessMatcher.ts","VideoWrapper.ts","Timer.tsx","GameSummary.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["initialState","videos","guesses","index","guess_to_show","undefined","playing","tags","appSlice","createSlice","name","reducers","change_video","state","action","new_video","payload","guess","answers","push","submit_guess","length","show_next_tag","POPULARITY_LIST","start","change_guess","actions","match_sorter_options","keys","tag","baseSort","tag_a","tag_b","item","count","filter_options","options","inputValue","matchSorter","slice","GuessInput","all_tags","dispatch","useThunkDispatch","useState","set_guess","id","onSubmit","event","preventDefault","Autocomplete","selectOnFocus","clearOnBlur","autoHighlight","autoComplete","disableClearable","clearOnEscape","style","width","filterOptions","getOptionLabel","onChange","_","value","renderInput","params","TextField","label","variant","autoFocus","IconButton","type","Icon","a","fetch","API_URL","TagType","COPYRIGHT","response","json","map","map_tag","filter","fetch_video","page","random","url","replaceAll","videoIsValid","data","increment","jsonTag","ambiguous","video","file_url","file_ext","VideoPlayer","video_wrapper","set_page","useEffect","mounted","then","video_page","wrap","set_video","muted","preload","autoPlay","src","onEnded","next_page","answer_ui","sortBy","GuessResultUI","guess_result","match_result","matches","className","exact","closest","Score","score","max_score","Matches","search_results","Fuse","includeScore","threshold","search","VideoWrapper","tags_by_name","this","Map","video_response","split","tag_string","get","preview_url","Timer","duration","on_time_over","interval","count_down","show_emergency_color","adjusted_duration","useTimer","endTime","onTimeOver","time","reset","normalize","CircularProgress","color","useStyles","makeStyles","root","minHeight","GameSummary","rounds","classes","Container","Grid","container","spacing","round","xs","sm","md","Card","CardActionArea","href","SAKUGABOORU_URL","CardMedia","component","title","alt","image","CardContent","Typography","gutterBottom","Button","onClick","choose_random_tags","max","min","sample","score_to_show","total","i","guess_matches","useDispatch","App","useSelector","app","number_of_rounds","set_all_tags","set_video_wrapper","fetch_all_tags","Fragment","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","appReducer","dark_theme","createMuiTheme","palette","primary","lightBlue","secondary","red","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.6b53e3b2.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { POPULARITY_LIST, Tag } from './App';\nimport { Guess } from './GuessMatcher';\nimport { Video } from './VideoWrapper';\n\ninterface AppState {\n  readonly videos: Video[][],\n  readonly guesses: Guess[],\n  readonly index: number,\n  readonly guess_to_show: number | undefined,\n  readonly playing: boolean,\n  readonly tags: Tag[],\n}\n\nconst initialState: AppState = {\n  videos: [],\n  guesses: [],\n  index: 0,\n  guess_to_show: undefined,\n  playing: false,\n  tags: [],\n};\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    change_video: (state, action: PayloadAction<Video>) => {\n      const new_video = action.payload;\n      const index = state.index;\n      const guess = state.guesses[index]?.guess;\n      state.guesses[index] = { guess, answers: new_video.tags };\n      state.videos[index] ?\n        state.videos[index].push(new_video) :\n        state.videos[index] = [new_video];\n    },\n    submit_guess: state => {\n      const guesses = state.guesses;\n      const index = state.index;\n      const videos = state.videos[index];\n\n      // someone tried to submit a guess before\n      // the video loaded. just ignore it\n      if (videos === undefined) {\n        return;\n      }\n    \n      state.guess_to_show = index;\n    \n      if (!guesses[index]) {\n        guesses[index] = {\n          answers: videos[videos.length - 1]?.tags ?? [],\n        };\n      }\n    },\n    show_next_tag: state => {\n      const index = state.index;\n      if ((index + 1) < POPULARITY_LIST.length) {\n        state.index = index + 1;\n      } else {\n        state.index = 0;\n        state.playing = false;\n      }\n      state.guess_to_show = undefined;\n    },\n    start: (state, action: PayloadAction<Tag[]>) => {\n      state.index = 0;\n      state.guesses = [];\n      state.playing = true;\n      state.tags = action.payload;\n    },\n    change_guess: (state, action: PayloadAction<string>) => {\n      const guess = action.payload;\n      const index = state.index;\n      const videos = state.videos[index];\n      if (videos) {\n        state.guesses[index] = {\n          guess,\n          answers: videos[videos.length - 1]?.tags ?? []\n        };\n      }\n    },\n  },\n});\n\nexport const {\n  change_video,\n  show_next_tag,\n  start,\n  submit_guess,\n  change_guess\n} = appSlice.actions;\n\nexport default appSlice.reducer;\n","import { Icon, IconButton, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport { Tag, useThunkDispatch } from './App';\nimport { matchSorter, MatchSorterOptions } from 'match-sorter';\nimport { change_guess, submit_guess } from './appSlice';\n\nconst GuessInput = ({ all_tags }: { all_tags: Tag[] }) => {\n  const dispatch = useThunkDispatch();\n  const [guess, set_guess] = useState<Tag | null>(null);\n\n  const on_guess_change = (_: ChangeEvent<{}>, value: Tag | null) => {\n    set_guess(value);\n    dispatch(change_guess(value?.name ?? \"\"));\n  }\n\n  const on_form_submitted = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (guess) {\n      dispatch(submit_guess());\n    }\n  }\n\n  return (\n    <form id=\"guess\" onSubmit={on_form_submitted}>\n      <Autocomplete\n        selectOnFocus\n        clearOnBlur\n        autoHighlight\n        autoComplete\n        disableClearable\n        clearOnEscape\n        options={all_tags}\n        style={{ width: 300 }}\n        filterOptions={filter_options}\n        getOptionLabel={tag => tag.name}\n        onChange={on_guess_change}\n        renderInput={(params) => <TextField {...params} label=\"Guess the title\" variant=\"filled\" autoFocus />}\n      />\n      <IconButton type=\"submit\">\n        <Icon>send</Icon>\n      </IconButton>\n    </form>\n  );\n};\n\nconst match_sorter_options: MatchSorterOptions<Tag> = {\n  keys: [tag => tag.name],\n  baseSort: (tag_a, tag_b) => tag_b.item.count - tag_a.item.count,\n};\n\nconst filter_options = (options: Tag[], { inputValue }: { inputValue: string}) =>\n  inputValue ? matchSorter(options, inputValue, match_sorter_options).slice(0, 100) : [];\n  \nexport default GuessInput;","import { Tag, TagType } from \"./App\";\nimport { random } from \"lodash\";\n\nconst API_URL = \"/api/\";\n\nexport type VideoResponse = {\n    file_url: string,\n    id: number,\n    tags: string,\n    preview_url: string,\n};\n\nexport type Page<Data> = {\n    data: Data,\n    page: number,\n}\n\nexport async function fetch_all_tags() {\n    const response = await fetch(API_URL+'tag.json?limit=0&order=count&type='+TagType.COPYRIGHT);\n    const tags: Tag[] = (await response.json()).map(map_tag);\n    return tags.filter(({ count }) => count > 0);\n}\n\nexport async function fetch_video({ tag, page = undefined }: { tag: Tag, page?: number }): Promise<Page<VideoResponse>> {\n    page = page ?? random(tag.count);\n    const url = API_URL+'post.json?limit=1&page=' + page + '&tags=' + tag.name.replaceAll(\" \", \"_\") + \" rating:safe\";\n    const response = await fetch(url);\n    const videos: VideoResponse[] = await response.json();\n\n    if (videoIsValid(videos[0])) {\n        return {\n            data: videos[0],\n            page,\n        };\n    } else {\n        return fetch_video({\n            tag,\n            page: increment(page, tag)\n        });\n    }\n}\n\nconst map_tag = (jsonTag: any): Tag => ({\n    ambiguous: jsonTag.ambiguous,\n    count: jsonTag.count,\n    id: jsonTag.id,\n    name: jsonTag.name.replaceAll(\"_\", \" \"),\n    type: jsonTag.type,\n});\n\nexport const increment = (page: number, tag: Tag) => (page + 1) % tag.count;\n\nfunction videoIsValid(video: any) {\n    return video\n        && video.file_url\n        && (video.file_ext === \"mp4\" || video.file_ext === \"webm\")\n        && video.id;\n}","import { useEffect, useState } from \"react\";\nimport { Tag, useThunkDispatch } from \"./App\";\nimport { change_video } from \"./appSlice\";\nimport { fetch_video, increment, Page, VideoResponse } from \"./SakugaAPI\";\nimport VideoWrapper, { Video } from \"./VideoWrapper\";\n\ntype Props = {\n    tag: Tag,\n    video: Video | undefined,\n    video_wrapper: VideoWrapper,\n};\n\nconst VideoPlayer = ({ tag, video, video_wrapper }: Props) => {\n    const [page, set_page] = useState<number | undefined>(undefined);\n    const dispatch = useThunkDispatch();\n\n    useEffect(() => {\n        let mounted = true;\n        fetch_video({ tag }).then(video_page => {\n            if (mounted) {\n                const video = video_wrapper.wrap(video_page.data);\n                dispatch(change_video(video));\n                set_page(video_page.page);\n            }\n        });\n        return () => { mounted = false };\n    }, [tag, video_wrapper, dispatch]);\n\n    const play_next_video = () => {\n        const next_page = increment(page!, tag);\n        fetch_video({ tag, page: next_page }).then(set_video);\n    }\n\n    const set_video = (video_page: Page<VideoResponse>) => {\n        const video = video_wrapper.wrap(video_page.data);\n        dispatch(change_video(video));\n        set_page(video_page.page);\n    }\n\n    return (\n        <video\n            muted\n            preload=\"auto\"\n            autoPlay\n            src={video?.url}\n            onEnded={play_next_video}\n        />\n    )\n}\n\nexport default VideoPlayer;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport sample from 'lodash/sample';\nimport './App.css';\nimport GuessInput from './GuessInput';\nimport VideoPlayer from './VideoPlayer';\nimport Button from '@material-ui/core/Button';\nimport GuessResultUI from './GuessResultUI';\nimport Score from './Score';\nimport guess_matches, { Guess } from './GuessMatcher';\nimport { fetch_all_tags } from './SakugaAPI';\nimport VideoWrapper from './VideoWrapper';\nimport { RootState, store } from './app/store';\nimport { show_next_tag, start, submit_guess } from './appSlice';\nimport Timer from './Timer';\nimport GameSummary, { Round } from './GameSummary';\n\nexport enum TagType {\n  GENERAL = 0,\n  ARTIST = 1,\n  COPYRIGHT = 3,\n  CHARACTER = 4,\n}\n\nexport type Tag = {\n  readonly ambiguous: boolean,\n  readonly count: number,\n  readonly id: number,\n  readonly name: string,\n  readonly type: TagType,\n};\n\ntype Popularity = { \"max\": number, \"min\": number };\n\nconst TAG_TIMER_DURATION = 30;\nconst RESULT_DISPLAY_DURATION = 4;\nconst LOADING_DURATION = 0.8;\nexport const POPULARITY_LIST: Popularity[] = [\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 1, \"min\": 1 },\n];\n\nexport function choose_random_tags(tags: Tag[]): Tag[] {\n  return POPULARITY_LIST.map(({ max, min }) =>\n    sample(tags.filter(({ count }) => max >= count && count >= min))\n  ) as Tag[];\n}\n\nfunction score_to_show(index: number, guess_to_show: number | undefined) {\n  return guess_to_show !== undefined ?\n    index + 1 :\n    index;\n}\n\nfunction score(guesses: Guess[], index: number) {\n  let total = 0;\n\n  for (let i = 0; i < index; i++) {\n    if (guess_matches(guesses[i]).matches) {\n      total += 1;\n    }\n  }\n\n  return total;\n}\n\nexport const useThunkDispatch = () => useDispatch<typeof store.dispatch>();\n\nfunction App() {\n  const {\n    guesses,\n    index,\n    videos,\n    guess_to_show,\n    playing,\n    tags,\n  } = useSelector((state: RootState) => state.app);\n  const rounds: Round[] = useSelector((state: RootState) => {\n    const app = state.app;\n    const number_of_rounds = app.tags.length;\n    const rounds = [];\n    for (let i = 0; i < number_of_rounds; i++) {\n      rounds.push({\n        tag: app.tags[i],\n        videos: app.videos[i],\n        guess: app.guesses[i],\n      });\n    }\n    return rounds;\n  });\n  const dispatch = useThunkDispatch();\n\n  const [all_tags, set_all_tags] = useState<Tag[]>([]);\n  const [video_wrapper, set_video_wrapper] = useState<VideoWrapper | undefined>(undefined);\n\n  useEffect(() => {\n    fetch_all_tags().then(tags => {\n      set_all_tags(tags);\n      set_video_wrapper(new VideoWrapper(tags));\n    });\n  }, []);\n\n  return (\n    <React.Fragment>\n      {\n        guess_to_show !== undefined &&\n        <Timer\n          duration={RESULT_DISPLAY_DURATION}\n          on_time_over={() => dispatch(show_next_tag())}\n          className={\"controls timer\"}\n        />\n      }\n      {\n        playing &&\n          <Score\n            score={score(guesses, score_to_show(index, guess_to_show))}\n            max_score={score_to_show(index, guess_to_show)} />\n      }\n      {\n        all_tags.length === 0 &&\n        <Timer duration={LOADING_DURATION} />\n      }\n      {\n        !playing &&\n        guesses.length === 0 &&\n        <Button\n          variant=\"contained\"\n          disabled={all_tags.length === 0}\n          onClick={() => dispatch(start(choose_random_tags(all_tags)))}\n          id=\"start\">\n            Start\n        </Button>\n      }\n      {\n        !playing &&\n        guesses.length > 0 &&\n        <GameSummary rounds={rounds} all_tags={all_tags} />\n      }\n      {\n        playing && tags.length > 0 && guess_to_show === undefined && video_wrapper &&\n        <React.Fragment>\n          {videos[index] &&\n          <Timer\n            duration={TAG_TIMER_DURATION}\n            on_time_over={() => dispatch(submit_guess())}\n            count_down={true}\n            show_emergency_color={true}\n            className={\"controls timer\"}\n          />\n          }\n          <VideoPlayer\n            tag={tags[index]}\n            video={videos[index] ? videos[index][videos[index].length - 1] : undefined}\n            video_wrapper={video_wrapper}\n          />\n        </React.Fragment>\n      }\n      {\n        guess_to_show !== undefined &&\n        <GuessResultUI\n          guess_result={{\n            guess: guesses[guess_to_show]!,\n            match_result: guess_matches(guesses[guess_to_show]!),\n          }} />\n      }\n      {\n        playing && guess_to_show === undefined &&\n        <GuessInput all_tags={all_tags} />\n      }\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { Tag } from './App';\nimport { Guess, MatchResult } from './GuessMatcher';\nimport { sortBy } from 'lodash';\n\nconst GuessResultUI = ({guess_result}: {guess_result: GuessResult }) => {\n    if (guess_result.match_result.matches && guess_result.guess.guess) {\n        return (\n            <div id=\"guess-result\" className=\"controls correct\">\n                <p>{guess_result.guess.guess}</p>\n                {\n                    !guess_result.match_result.exact &&\n                    <p>({guess_result.match_result.closest})</p>\n                }\n                <h1>🎉 is correct 🎊</h1>\n            </div>\n        )\n    } else if (guess_result.guess.guess) {\n        return (\n            <div id=\"guess-result\" className=\"controls wrong\">\n                <p id=\"incorrect-guess\">{guess_result.guess.guess}</p>\n                <h1>is incorrect</h1>\n                {answer_ui(guess_result.guess.answers)}\n            </div>\n        );\n    } else {\n        return (\n            <div id=\"guess-result\" className=\"controls wrong\">\n                <h1>No guess</h1>\n                {answer_ui(guess_result.guess.answers)}\n            </div>\n        );\n    }\n    \n}\n\nconst answer_ui = (answers: Tag[]) => {\n    if (answers.length > 0) {\n        return <p>it was {sortBy(answers, tag => tag.count)[answers.length - 1].name}</p>\n    } else {\n        return null;\n    }\n}\n\nexport type GuessResult = {\n    guess: Guess,\n    match_result: MatchResult,\n}\n\nexport default GuessResultUI;","const Score = ({score, max_score}: {score: number, max_score: number}) =>\n    <p id=\"score\" className=\"controls\">Correct: {score}/{max_score}</p>\n\nexport default Score;","import Fuse from \"fuse.js\";\nimport { Tag } from \"./App\";\n\nexport type MatchResult = {\n    readonly matches: boolean,\n    readonly exact: boolean,\n    readonly closest?: string,\n}\n\nconst Matches = (guess: Guess): MatchResult => {\n    if (!guess.guess) {\n        return {\n            matches: false,\n            exact: false,\n        };\n    }\n    const options = {\n        includeScore: true,\n        threshold: 0.1,\n      };\n    const fuse = new Fuse(guess.answers.map(tag => tag.name), options);\n    const search_results = fuse.search(guess.guess);\n    return {\n        matches: search_results.length > 0,\n        exact: search_results[0]?.score === 0,\n        closest: search_results[0]?.item,\n    }\n}\n\nexport type Guess = {\n    readonly answers: Tag[],\n    readonly guess?: string,\n}\n\nexport default Matches;","import { Tag } from \"./App\";\nimport { VideoResponse } from \"./SakugaAPI\";\nimport { Map } from \"immutable\";\n\nclass VideoWrapper {\n    readonly tags_by_name: Map<string, Tag>;\n\n    constructor(all_tags: Tag[]) {\n        this.tags_by_name = Map(all_tags.map(tag => [tag.name, tag]));\n    }\n\n    wrap(video_response: VideoResponse): Video {\n        const tags = video_response.tags\n            .split(\" \")\n            .map(tag_string => tag_string.replaceAll(\"_\", \" \"))\n            .map(tag_string => this.tags_by_name.get(tag_string))\n            .filter(tag => tag !== undefined) as Tag[];\n\n        return {\n            tags,\n            url: video_response.file_url,\n            id: video_response.id,\n            preview_url: video_response.preview_url,\n        }\n    }\n}\n\nexport type Video = {\n    readonly url: string,\n    readonly id: number,\n    readonly tags: Tag[],\n    readonly preview_url: string,\n};\n\nexport default VideoWrapper;","import { CircularProgress } from \"@material-ui/core\"\nimport { useEffect } from \"react\";\nimport { useTimer } from \"use-timer\";\n\ntype Props = {\n    duration: number,\n    on_time_over?: () => void,\n    className?: string,\n    interval?: number,\n    count_down?: boolean,\n    show_emergency_color?: boolean,\n}\n\nconst Timer = ({\n    duration,\n    on_time_over,\n    interval=50,\n    className,\n    count_down=false,\n    show_emergency_color=false,\n}: Props) => {\n    const adjusted_duration = duration * 1000 / interval;\n    const { time, start, reset } = useTimer({\n        endTime: adjusted_duration,\n        interval,\n        onTimeOver: on_time_over,\n    });\n\n    useEffect(() => {\n        start();\n        return reset;\n    }, [reset, start]);\n\n    const normalize = (value: number) => {\n        const adjusted_value = count_down ? adjusted_duration - value : value;\n        return adjusted_value * 100 / adjusted_duration;\n    }\n\n    return <CircularProgress\n        color={normalize(time) < 25 && show_emergency_color ? \"secondary\" : \"primary\"}\n        variant=\"determinate\"\n        value={normalize(time)}\n        className={className} />\n}\n\nexport default Timer;","import { Button, Card, CardActionArea, CardContent, CardMedia, Container, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport { choose_random_tags, Tag, useThunkDispatch } from \"./App\";\nimport { start } from \"./appSlice\";\nimport Matches, { Guess } from \"./GuessMatcher\";\nimport { Video } from \"./VideoWrapper\";\n\nexport type GameSummaryProps = {\n    rounds: Round[],\n    all_tags: Tag[],\n};\n\nexport type Round = {\n    tag: Tag,\n    videos: Video[],\n    guess: Guess,\n}\n\nconst SAKUGABOORU_URL = \"https://www.sakugabooru.com/post\";\nconst SAKUGABOORU_TAG_URL = SAKUGABOORU_URL + \"?tags=\";\n\nconst render_guess = (guess: Guess) => {\n    if (!guess.guess) {\n        return \"No guess\";\n    }\n    return \"\\\"\" + guess.guess + \"\\\" \" + (Matches(guess).matches ? \"🎉 was correct 🎊\" : \"was incorrect\");\n}\n\nconst useStyles = makeStyles({\n    root: {\n        minHeight: 250,\n    }\n});\n\nconst GameSummary = ({rounds, all_tags}: GameSummaryProps) => {\n    const dispatch = useThunkDispatch();\n    const classes = useStyles();\n\n    const round_summary = (round: Round, index: number) => {\n        return (\n            <Grid key={index} item className=\"round-summary\" xs={12} sm={6} md={4}>\n                <Card classes={classes}>\n                    <CardActionArea href={SAKUGABOORU_TAG_URL + round.tag.name.replaceAll(\" \", \"_\")}>\n                        <CardMedia\n                            component=\"img\"\n                            title={\"Image thumbnail of a clip from \" + round.videos[0].tags[0].name}\n                            alt={\"Image thumbnail of a clip from \" + round.videos[0].tags[0].name}\n                            image={round.videos[0].preview_url}\n                        />\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                {round.tag.name}\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\">\n                                {render_guess(round.guess)}\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    }    \n\n    return (\n        <Container>\n            <Grid container spacing={2}>\n                {rounds.map(round_summary)}\n            </Grid>\n            <div id=\"play-again\">\n                <Button\n                    variant=\"contained\"\n                    onClick={() => dispatch(start(choose_random_tags(all_tags)))}\n                    color=\"primary\"\n                >\n                        Play Again\n                </Button>\n            </div>\n        </Container>\n    )\n}\n\nexport default GameSummary;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport appReducer from '../appSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { lightBlue, red } from '@material-ui/core/colors';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nexport const dark_theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: lightBlue,\n    secondary: red\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={dark_theme}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}