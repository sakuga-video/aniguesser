{"version":3,"sources":["GuessDatabase.ts","appSlice.ts","Timer.tsx","GuessInput.tsx","SakugaAPI.tsx","VideoPlayer.tsx","GuessResultUI.tsx","GuessMatcher.ts","VideoWrapper.ts","StartButton.tsx","App.tsx","GameSummary.tsx","Progress.tsx","Navigation.tsx","reportWebVitals.ts","historySlice.ts","app/store.ts","History.tsx","index.tsx"],"names":["database","database_name","guesses","version","stores","table","Dexie","initialState","videos","index","guess_to_show","undefined","playing","tags","appSlice","createSlice","name","reducers","mark_played","state","action","video_index","payload","tag_index","guess","playing_video","answers","played","set_videos","submit_guess","show_next_tag","length","start","change_guess","skip_tag","splice","actions","save_and_submit_guess","time_to_guess","dispatch","getState","app","put","date","Date","now","filter","video","catch","error","console","log","Timer","duration","size","type","on_time_over","interval","className","count_down","show_emergency_color","adjusted_duration","useTimer","endTime","onTimeOver","time","reset","useEffect","normalize","value","progress_props","color","variant","LinearProgress","CircularProgress","useStyles","makeStyles","wrapper","position","fabProgress","top","left","match_sorter_options","keys","tag","baseSort","tag_a","tag_b","item","count","filter_options","options","inputValue","matchSorter","slice","GuessInput","all_tags","useThunkDispatch","classes","useState","set_guess","id","onSubmit","event","preventDefault","Autocomplete","selectOnFocus","clearOnBlur","autoHighlight","autoComplete","disableClearable","clearOnEscape","style","width","filterOptions","getOptionLabel","onChange","_","renderInput","params","TextField","label","autoFocus","Fab","area-label","Send","a","fetch","API_URL","TagType","COPYRIGHT","response","json","map","map_tag","limit","url","split","join","jsonTag","VideoPlayer","video_wrapper","loading","set_loading","set_index","mounted","fetch_random_videos","then","video_responses","wrap","play_next_video","new_index","Fragment","muted","onWaiting","onCanPlay","onPlay","preload","autoPlay","loop","onError","src","onEnded","timer","root","flexBasis","answer_ui","sortBy","GuessResultUI","closest_answer","result","is_exact","Paper","correct","incorrect","missing","Matches","search_results","Fuse","includeScore","threshold","search","score","VideoWrapper","tags_by_name","video_response","tag_string","get","file_url","preview_url","this","Map","choose_random_tags","POPULARITY_LIST","max","min","sample","StartButton","Button","onClick","SAKUGABOORU_TAG_URL","SAKUGABOORU_URL","render_guess","match_result","guess_string","minHeight","GameSummary","rounds","Container","Grid","container","spacing","round","xs","sm","md","Card","CardActionArea","href","target","CardMedia","component","title","alt","image","CardContent","Typography","gutterBottom","useProgressStepIconStyles","theme","display","height","alignItems","palette","background","default","active","text","primary","circle","borderRadius","border","backgroundColor","completed","secondary","main","zIndex","fontSize","ProgressStepIcon","props","progressClass","clsx","progressStyles","padding","margin","bottom","transform","ProgressConnector","withStyles","StepConnector","Progress","activeStep","steps","Stepper","connector","is_correct","guess_matches","Step","StepLabel","StepIconComponent","marginTop","Navigation","pathname","window","location","setValue","Box","BottomNavigation","newValue","showLabels","BottomNavigationAction","icon","SportsEsports","Link","to","Restore","useDispatch","App","useSelector","number_of_rounds","i","push","set_all_tags","set_video_wrapper","fetch_all_tags","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","historySlice","page","num_guesses","set_guesses","set_num_guesses","load_guesses","page_size","orderBy","reverse","offset","toArray","store","configureStore","reducer","appReducer","history","historyReducer","pagination","paddingBottom","guess_ui","last_video","History","game_history","Pagination","Math","ceil","dark_theme","createMuiTheme","lightBlue","red","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","path","document","querySelector"],"mappings":"6WAyBeA,EAFE,I,kDAjBb,WAAYC,GAAwB,IAAD,8BAC/B,cAAMA,IAHVC,aAEmC,EAE/B,EAAKC,QAAQ,GAAGC,OAAO,CACnBF,QAAS,yCAEb,EAAKA,QAAU,EAAKG,MAAM,WALK,E,gBAHXC,GAoBX,CAAkB,cCP7BC,EAAyB,CAC7BC,OAAQ,GACRN,QAAS,GACTO,MAAO,EACPC,mBAAeC,EACfC,SAAS,EACTC,KAAM,IAGKC,EAAWC,YAAY,CAClCC,KAAM,MACNT,eACAU,SAAU,CACRC,YAAa,SAACC,EAAOC,GAAmC,IAAD,EAC/CC,EAAcD,EAAOE,QACrBC,EAAYJ,EAAMV,MAClBe,EAAK,UAAGL,EAAMjB,QAAQqB,UAAjB,aAAG,EAA0BC,MAElCC,EADSN,EAAMX,OAAOe,GACCF,GAE7BF,EAAMjB,QAAQqB,GAAa,CAAEC,QAAOE,QAASD,EAAcZ,MAC3DY,EAAcE,QAAS,GAEzBC,WAAY,SAACT,EAAOC,GAClBD,EAAMX,OAAOW,EAAMV,OAASW,EAAOE,SAErCO,aAAc,SAACV,EAAOC,GACpBD,EAAMT,cAAgBS,EAAMV,MAC5BU,EAAMjB,QAAQiB,EAAMV,OAASW,EAAOE,SAEtCQ,cAAe,SAAAX,GACb,IAAMV,EAAQU,EAAMV,MACfA,EAAQ,EAAKU,EAAMN,KAAKkB,OAC3BZ,EAAMV,MAAQA,EAAQ,GAEtBU,EAAMV,MAAQ,EACdU,EAAMP,SAAU,GAElBO,EAAMT,mBAAgBC,GAExBqB,MAAO,SAACb,EAAOC,GACbD,EAAMV,MAAQ,EACdU,EAAMjB,QAAU,GAChBiB,EAAMX,OAAS,GACfW,EAAMP,SAAU,EAChBO,EAAMN,KAAOO,EAAOE,SAEtBW,aAAc,SAACd,EAAOC,GACpB,IAGY,IAHNI,EAAQJ,EAAOE,QACfb,EAAQU,EAAMV,MACdD,EAASW,EAAMX,OAAOC,GACxBD,IACFW,EAAMjB,QAAQO,GAAS,CACrBe,QACAE,QAAO,oBAAElB,EAAOA,EAAOuB,OAAS,UAAzB,aAAE,EAA2BlB,YAA7B,QAAqC,MAIlDqB,SAAU,SAAAf,GACRA,EAAMN,KAAKsB,OAAOhB,EAAMV,MAAO,GAC1BU,EAAMV,OAAUU,EAAMN,KAAKkB,SAC9BZ,EAAMV,MAAQ,EACdU,EAAMP,SAAU,O,EAcpBE,EAASsB,QAPXlB,E,EAAAA,YACAY,E,EAAAA,cACAE,E,EAAAA,MACAH,E,EAAAA,aACAI,E,EAAAA,aACAC,E,EAAAA,SACAN,E,EAAAA,WAGWS,EAAwB,SAACC,GAAD,OAAqC,SAACC,EAAUC,GAAc,IAAD,EAC1FrB,EAAQqB,IAAWC,IACnBvC,EAAUiB,EAAMjB,QAChBO,EAAQU,EAAMV,MACdD,EAASW,EAAMX,OAAOC,GAI5B,QAAeE,IAAXH,IAAwB,UAACA,EAAO,UAAR,aAAC,EAAWmB,QAAxC,CAKA,IACY,IADRH,EAAQtB,EAAQO,GACpB,IAAKe,EACHA,EAAQ,CACNE,QAAO,oBAAElB,EAAOA,EAAOuB,OAAS,UAAzB,aAAE,EAA2BlB,YAA7B,QAAqC,IAIhDb,EAASE,QAAQwC,IAAI,CACnBC,KAAMC,KAAKC,MACXrB,MAAOA,EAAMA,MACbhB,OAAQA,EAAOsC,QAAO,SAAAC,GAAK,OAAIA,EAAMpB,UACrCW,kBACCU,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAGhBV,EAASV,EAAaL,OAGTV,IAAf,Q,iCCxEesC,EAvCD,SAAC,GASD,IARVC,EAQS,EARTA,SACAC,EAOS,EAPTA,KACAC,EAMS,EANTA,KACAC,EAKS,EALTA,aAKS,IAJTC,gBAIS,MAJA,GAIA,EAHTC,EAGS,EAHTA,UAGS,IAFTC,kBAES,aADTC,4BACS,SACHC,EAA+B,IAAXR,EAAkBI,EADnC,EAEsBK,mBAAS,CACpCC,QAASF,EACTJ,WACAO,WAAYR,IAHRS,EAFC,EAEDA,KAAMjC,EAFL,EAEKA,MAAOkC,EAFZ,EAEYA,MAMrBC,qBAAU,WAEN,OADAnC,IACOkC,IACR,CAACA,EAAOlC,IAEX,IAAMoC,EAAY,SAACC,GAEf,OAAwB,KADDV,EAAaE,EAAoBQ,EAAQA,GAClCR,GAG5BS,EAAiB,CACnBC,MAAOH,EAAUH,GAAQ,IAAML,EAAuB,YAAc,UACpEY,QAAS,cACTH,MAAOD,EAAUH,GACjBP,aAGJ,MAAgB,WAATH,EACH,cAACkB,EAAA,EAAD,eAAoBH,IACpB,cAACI,EAAA,EAAD,aAAkBpB,KAAMA,GAAUgB,KCzCpCK,EAAYC,YAAW,CACzBC,QAAS,CACPC,SAAU,YAEZC,YAAa,CACXD,SAAU,WACVE,KAAM,EACNC,MAAO,KAwDPC,EAAgD,CACpDC,KAAM,CAAC,SAAAC,GAAG,OAAIA,EAAIpE,OAClBqE,SAAU,SAACC,EAAOC,GAAR,OAAkBA,EAAMC,KAAKC,MAAQH,EAAME,KAAKC,QAGtDC,EAAiB,SAACC,EAAD,OAAmBC,EAAnB,EAAmBA,WAAnB,OACrBA,EAAaC,YAAYF,EAASC,EAAYV,GAAsBY,MAAM,EAAG,KAAO,IAEvEC,EA5DI,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SACdzD,EAAW0D,KACXC,EAAUvB,IAFwC,EAG7BwB,mBAAqB,MAHQ,mBAGjD3E,EAHiD,KAG1C4E,EAH0C,KAiBxD,OACE,uBAAMC,GAAG,QAAQC,SARO,SAACC,GACzBA,EAAMC,iBACFhF,GACFe,EAASF,EAAsB,KAKjC,UACE,qBAAKgE,GAAG,cAAR,SACE,cAACI,EAAA,EAAD,CACEC,eAAa,EACbC,aAAW,EACXC,eAAa,EACbC,cAAY,EACZC,kBAAgB,EAChBC,eAAa,EACbpB,QAASK,EACTgB,MAAO,CAAEC,MAAO,KAChBC,cAAexB,EACfyB,eAAgB,SAAA/B,GAAG,OAAIA,EAAIpE,MAC3BoG,SA1BgB,SAACC,EAAoBhD,GAAuB,IAAD,EACjE+B,EAAU/B,GACV9B,EAASN,EAAY,iBAACoC,QAAD,IAACA,OAAD,EAACA,EAAOrD,YAAR,QAAgB,MAyB/BsG,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAM,kBAAkBjD,QAAQ,SAASkD,WAAS,UAGtG,sBAAKhE,UAAWwC,EAAQrB,QAAxB,UACE,cAAC,EAAD,CACEvB,KAAM,GACND,SAlDiB,GAmDjBG,aAAc,kBAAMjB,EAASF,EAnDZ,MAoDjBsB,YAAY,EACZC,sBAAsB,EACtBF,UAAWwC,EAAQnB,cAErB,cAAC4C,EAAA,EAAD,CAAKpE,KAAK,SAASqE,aAAW,SAA9B,SACE,cAACC,EAAA,EAAD,a,qECvDH,8BAAAC,EAAA,sEACoBC,MAAMC,0CAA6CC,GAAQC,WAD/E,cACGC,EADH,gBAEwBA,EAASC,OAFjC,cAEGvH,EAFH,OAEyCwH,IAAIC,GAF7C,kBAGIzH,EAAKiC,QAAO,qBAAG2C,MAAoB,MAHvC,4C,kEAMA,WAAmCL,GAAnC,+BAAA0C,EAAA,6DAA6CS,EAA7C,+BAAqD,EAClDC,EAAMR,6DAAkE5C,EAAIpE,KAAKyH,MAAM,KAAKC,KAAK,KAAO,UAAYH,EADvH,SAEoBR,MAAMS,GAF1B,cAEGL,EAFH,gBAGUA,EAASC,OAHnB,oF,sBAMP,IAAME,EAAU,SAACK,GAAD,MAAwB,CACpClD,MAAOkD,EAAQlD,MACfY,GAAIsC,EAAQtC,GACZrF,KAAM2H,EAAQ3H,KAAKyH,MAAM,KAAKC,KAAK,OCoCxBE,EAjDK,SAAC,GAA2C,IAAD,EAAxCxD,EAAwC,EAAxCA,IAAK5E,EAAmC,EAAnCA,OAAQqI,EAA2B,EAA3BA,cAC1BtG,EAAW0D,KAD0C,EAE5BE,oBAAS,GAFmB,mBAEpD2C,EAFoD,KAE3CC,EAF2C,OAGhC5C,mBAAS,GAHuB,mBAGpD1F,EAHoD,KAG7CuI,EAH6C,KAK3D7E,qBAAU,WACN,IAAI8E,GAAU,EAcd,OAbAD,EAAU,GDHX,SAAP,kCCIQE,CAAoB9D,GACf+D,MAAK,SAAAC,GAAe,OAAIA,EAAgBf,IAAIQ,EAAcQ,SAC1DF,MAAK,SAAA3I,GACEyI,IACIzI,EAAOuB,OAAS,GAChBiH,EAAU,GACVzG,EAASX,EAAWpB,KAEpB+B,EAASL,SAIlB,WAAQ+G,GAAU,KAC1B,CAAC7D,EAAKyD,EAAetG,IAExB,IAAM+G,EAAkB,WACpB,GAAI9I,EAAOuB,OAAS,EAAG,CACnB,IAAMwH,GAAa9I,EAAQ,GAAKD,EAAOuB,OACvCiH,EAAUO,KAIlB,OACI,eAAC,IAAMC,SAAP,YACoB,IAAlBhJ,EAAOuB,QAAgB+G,IAAY,cAACpE,EAAA,EAAD,CAAkBhB,UAAU,kBACjE,uBACI+F,OAAK,EACLC,UAAW,kBAAMX,GAAY,IAC7BY,UAAW,kBAAMZ,GAAY,IAC7Ba,OAAQ,kBAAMrH,EAASrB,EAAYT,KACnCoJ,QAAQ,OACRC,UAAQ,EACRC,KAAwB,IAAlBvJ,EAAOuB,OACbiI,QAASV,EACTW,IAAG,UAAEzJ,EAAOC,UAAT,aAAE,EAAe+H,IACpB0B,QAAS,WAAOhH,QAAQC,IAAI,eAAgB4F,GAAY,GAAOO,W,iBC/CrE3E,EAAYC,YAAW,CACzBuF,MAAO,CACLlD,MAAO,QAETmD,KAAM,CACFC,UAAW,WAsCbC,EAAY,SAAC5I,GACf,OAAIA,EAAQK,OAAS,EACV,wCAAWwI,iBAAO7I,GAAS,SAAA0D,GAAG,OAAIA,EAAIK,SAAO/D,EAAQK,OAAS,GAAGf,QAEjE,MAIAwJ,EAnCO,SAAC,GAA4E,IAA3EhJ,EAA0E,EAA1EA,MAAOE,EAAmE,EAAnEA,QAAS+I,EAA0D,EAA1DA,eAAgBC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,SACtDpI,EAAW0D,KACXC,EAAUvB,IAEVwF,EACF,cAAC,EAAD,CACI9G,SAxBoB,EAyBpBG,aAAc,kBAAMjB,EAAST,MAC7ByB,KAAO,SACPG,UAAWwC,EAAQiE,QAG3B,OACI,eAACS,EAAA,EAAD,CAAOvE,GAAG,eAAe3C,UAAWwC,EAAQkE,KAA5C,UACgB,YAAXM,GAAwB,4BAAIlJ,IACjB,YAAXkJ,IAAyBC,GAAY,kCAAKF,EAAL,OACtC,6BAAK,CACDI,QAAS,uCACTC,UAAW,eACXC,QAAS,YACXL,KACU,YAAXA,GAAwBJ,EAAU5I,GAClCyI,M,SCZEa,GAzBC,SAACxJ,GAA+B,IAAD,IAC3C,IAAKA,EAAMA,MACP,MAAO,CACHkJ,OAAQ,UACRC,UAAU,GAGlB,IAKMM,EADO,IAAIC,KAAK1J,EAAME,QAAQ2G,KAAI,SAAAjD,GAAG,OAAIA,EAAIpE,QAJnC,CACZmK,cAAc,EACdC,UAAW,KAGaC,OAAO7J,EAAMA,OACzC,MAAO,CACHkJ,OAAQO,EAAelJ,OAAS,EAAI,UAAY,YAChD4I,SAAuC,KAA7B,UAAAM,EAAe,UAAf,eAAmBK,OAC7Bb,eAAc,UAAEQ,EAAe,UAAjB,aAAE,EAAmBzF,O,SCS5B+F,GA5BX,WAAYvF,GAAkB,IAAD,gCAFpBwF,kBAEoB,OAIpBnC,KAAO,SAACoC,GAOb,MAAO,CACH5K,KAPS4K,EAAe5K,KACvB4H,MAAM,KACNJ,KAAI,SAAAqD,GAAU,OAAIA,EAAWjD,MAAM,KAAKC,KAAK,QAC7CL,KAAI,SAAAqD,GAAU,OAAI,EAAKF,aAAaG,IAAID,MACxC5I,QAAO,SAAAsC,GAAG,YAAYzE,IAARyE,KAIfoD,IAAKiD,EAAeG,SACpBvF,GAAIoF,EAAepF,GACnBwF,YAAaJ,EAAeI,cAdhCC,KAAKN,aAAeO,aAAI/F,EAASqC,KAAI,SAAAjD,GAAG,MAAI,CAACA,EAAIpE,KAAMoE,Q,oGCaxD,SAAS4G,GAAmBnL,GAC/B,OAAOoL,GAAgB5D,KAAI,gBAAG6D,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,OACvBC,KAAOvL,EAAKiC,QAAO,gBAAG2C,EAAH,EAAGA,MAAH,OAAeyG,GAAOzG,GAASA,GAAS0G,SAM5D,ICdKlE,GDcCgE,GAAgC,CAC3C,CAAE,IAAO,IAAQ,IAAO,KACxB,CAAE,IAAO,IAAQ,IAAO,KACxB,CAAE,IAAO,IAAQ,IAAO,KACxB,CAAE,IAAO,IAAK,IAAO,KACrB,CAAE,IAAO,IAAK,IAAO,KACrB,CAAE,IAAO,IAAK,IAAO,KACrB,CAAE,IAAO,IAAK,IAAO,KACrB,CAAE,IAAO,IAAK,IAAO,KACrB,CAAE,IAAO,IAAK,IAAO,IACrB,CAAE,IAAO,GAAI,IAAO,GACpB,CAAE,IAAO,GAAI,IAAO,GACpB,CAAE,IAAO,EAAG,IAAO,IAGNI,GAtCK,SAAC,GAAuC,IAArCrG,EAAoC,EAApCA,SAEbzD,EAAW0D,KAGjB,OAFiBD,EAASjE,OAAS,EAG/B,cAACuK,GAAA,EAAD,CACI9H,QAAQ,YACR+H,QAAS,kBAAMhK,EAASP,EAAMgK,GAAmBhG,MACjDK,GAAG,QAHP,mBAMA,cAAC3B,EAAA,EAAD,KECK8H,GAAsBC,yCAE7BC,GAAe,SAAClL,GAClB,IAAMmL,EAAe3B,GAAQxJ,GACvBoL,EAAe,IAAOpL,EAAMA,MAAQ,KAC1C,MAAO,CACHuJ,QAAS,WACTF,QAAS+B,EAAe,wCACxB9B,UAAW8B,EAAe,iBAC5BD,EAAajC,SAGb/F,GAAYC,YAAW,CACzBwF,KAAM,CACFyC,UAAW,OAmDJC,GA/CK,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,OAAQ/G,EAAgC,EAAhCA,SACpBzD,EAAW0D,KACXC,EAAUvB,KA2BhB,OACI,eAACqI,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACKJ,EAAO1E,KA5BE,SAAC+E,EAAc3M,GACjC,OACI,cAACwM,GAAA,EAAD,CAAkBzH,MAAI,EAAC9B,UAAU,gBAAgB2J,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAApE,SACI,cAACC,GAAA,EAAD,CAAMtH,QAASA,EAAf,SACI,eAACuH,GAAA,EAAD,CAAgBC,KAAMlB,GAAsBY,EAAMhI,IAAIpE,KAAKyH,MAAM,KAAKC,KAAK,KAAMiF,OAAO,SAAxF,UACI,cAACC,GAAA,EAAD,CACIC,UAAU,MACVC,MAAO,kCAAoCV,EAAM5M,OAAO,GAAGK,KAAK,GAAGG,KACnE+M,IAAK,kCAAoCX,EAAM5M,OAAO,GAAGK,KAAK,GAAGG,KACjEgN,MAAOZ,EAAM5M,OAAO,GAAGqL,cAE3B,eAACoC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAYC,cAAY,EAAC3J,QAAQ,KAAKqJ,UAAU,KAAhD,SACKT,EAAMhI,IAAIpE,OAEf,cAACkN,GAAA,EAAD,CAAY1J,QAAQ,QAAQqJ,UAAU,IAAtC,SACKnB,GAAaU,EAAM5L,kBAd7Bf,QA4BX,qBAAK4F,GAAG,aAAR,SACI,cAACiG,GAAA,EAAD,CACI9H,QAAQ,YACR+H,QAAS,kBAAMhK,EAASP,EAAMgK,GAAmBhG,MACjDzB,MAAM,UAHV,8B,iECnEV6J,GAA4BxJ,aAAW,SAAAyJ,GAAK,MAAK,CACnDjE,KAAM,CACFkE,QAAS,OACTC,OAAQ,GACRC,WAAY,SACZjK,MAAO8J,EAAMI,QAAQC,WAAWC,SAEpCC,OAAQ,CACJrK,MAAO8J,EAAMI,QAAQI,KAAKC,SAE9BC,OAAQ,CACJ9H,MAAO,EACPsH,OAAQ,EACRS,aAAc,MACdC,OAAQ,iBACRC,gBAAiB,gBAErBC,UAAW,CACP5K,MAAO8J,EAAMI,QAAQW,UAAUC,KAC/BC,OAAQ,EACRC,SAAU,GACVN,OAAQ,QAEZpE,QAAS,CACLtG,MAAO8J,EAAMI,QAAQK,QAAQO,UAI/BG,GAAmB,SAAC3E,GACtB,IAAM3E,EAAUkI,KAChB,OAAQ,SAACqB,GAA0B,IACvBb,EAAsBa,EAAtBb,OAAQO,EAAcM,EAAdN,UAEZO,EAAgBxJ,EAAQ6I,OAQ5B,OAPII,IACAO,GAAiB,IAAMxJ,EAAQiJ,WAE/BtE,IACA6E,GAAiB,IAAMxJ,EAAQ2E,SAI/B,qBACInH,UAAWiM,aAAKzJ,EAAQkE,KAAT,gBACVlE,EAAQ0I,OAASA,IAF1B,SAKI,qBAAKlL,UAAWgM,QAM1BE,GAAiBhL,YAAW,CAC9BwF,KAAM,CACFsE,WAAY,oBACZY,OAAQ,IACRf,OAAQ,GACRsB,QAAS,EACTC,OAAQ,EACRd,aAAc,OACdlK,SAAU,QACViL,OAAQ,GACR9K,KAAM,MACN+K,UAAW,sBAKbC,GAAoBC,aAAW,CACjC9F,KAAM,CACFkE,QAAS,SAFS4B,CAIvBC,MAkBYC,GAhBE,SAAC,GAA+F,IAA7FC,EAA4F,EAA5FA,WAAYC,EAAgF,EAAhFA,MAAOpQ,EAAyE,EAAzEA,QAC7BgG,EAAU0J,KAChB,OACI,cAACW,GAAA,EAAD,CAASF,WAAYA,EAAY3M,UAAWwC,EAAQkE,KAAMoG,UAAW,cAACP,GAAD,IAArE,SACKK,EAAMjI,KAAI,SAACZ,EAAOhH,GACf,IAAMgQ,EAAavQ,EAAQO,IAAmD,YAAzCiQ,GAAcxQ,EAAQO,IAAQiK,OACnE,OACI,cAACiG,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CAAWC,kBAAmBrB,GAAiBiB,MADxChJ,S,2DClFzB9C,GAAYC,YAAW,CACzBwF,KAAM,CACFtF,SAAU,QACVwK,OAAQ,IACRS,OAAQ,EACR9I,MAAO,OACP6J,WAAY,MAyBLC,GArBI,WACf,IAAMC,EAAWC,OAAOC,SAASF,SADZ,EAEK7K,mBAAS6K,GAFd,mBAEd3M,EAFc,KAEP8M,EAFO,KAGfjL,EAAUvB,KAEhB,OACI,cAACyM,GAAA,EAAD,CAAK1N,UAAWwC,EAAQkE,KAAxB,SACI,eAACiH,GAAA,EAAD,CACIhN,MAAOA,EACP+C,SAAU,SAACC,EAAGiK,GACVH,EAASG,IAEbC,YAAU,EALd,UAOI,cAACC,GAAA,EAAD,CAAwB/J,MAAM,OAAOpD,MAAM,IAAIoN,KAAM,cAACC,GAAA,EAAD,IAAmB7D,UAAW8D,KAAMC,GAAG,MAC5F,cAACJ,GAAA,EAAD,CAAwB/J,MAAM,UAAUpD,MAAM,WAAWoN,KAAM,cAACI,GAAA,EAAD,IAAahE,UAAW8D,KAAMC,GAAG,oB,SHfpG3J,O,qBAAAA,I,mBAAAA,I,yBAAAA,I,0BAAAA,Q,KAaL,IAAMhC,GAAmB,kBAAM6L,eAwFvBC,OAtFf,WAAgB,IAAD,IAQTC,aAAY,SAAC7Q,GAAD,OAAsBA,EAAMsB,OAN1CvC,EAFW,EAEXA,QACAO,EAHW,EAGXA,MACAD,EAJW,EAIXA,OACAE,EALW,EAKXA,cACAE,EANW,EAMXA,QACAC,EAPW,EAOXA,KAEIkM,EAAkBiF,aAAY,SAAC7Q,GAInC,IAHA,IAAMsB,EAAMtB,EAAMsB,IACZwP,EAAmBxP,EAAI5B,KAAKkB,OAC5BgL,EAAS,GACNmF,EAAI,EAAGA,EAAID,EAAkBC,IAAK,CAAC,IAAD,EACzCnF,EAAOoF,KAAK,CACV/M,IAAK3C,EAAI5B,KAAKqR,GACd1R,OAAM,UAAEiC,EAAIjC,OAAO0R,UAAb,aAAE,EAAepP,QAAO,SAAAC,GAAK,OAAIA,EAAMpB,UAC7CH,MAAOiB,EAAIvC,QAAQgS,KAGvB,OAAOnF,KAEHJ,EAAeqF,aAAY,SAAC7Q,GAChC,IAAMT,EAAgBS,EAAMsB,IAAI/B,cAChC,YAAyBC,IAAlBD,OACLC,EACA+P,GAAcvP,EAAMsB,IAAIvC,QAAQQ,OA1BvB,EA6BoByF,mBAAgB,IA7BpC,mBA6BNH,EA7BM,KA6BIoM,EA7BJ,OA8B8BjM,wBAAmCxF,GA9BjE,mBA8BNkI,EA9BM,KA8BSwJ,EA9BT,KAuCb,OAPAlO,qBAAU,YNnDL,WAAP,gCMoDImO,GAAiBnJ,MAAK,SAAAtI,GACpBuR,EAAavR,GACbwR,EAAkB,IAAI9G,GAAa1K,SAEpC,KAEED,GAAWV,EAAQ6B,OAAS,EAE7B,eAAC,IAAMyH,SAAP,WACE,cAAC,GAAD,CAAauD,OAAQA,EAAQ/G,SAAUA,IACvC,cAAC,GAAD,OAMJ,sBAAKK,GAAG,OAAR,WAEKzF,GACkB,IAAnBV,EAAQ6B,QACR,eAAC,IAAMyH,SAAP,WACE,cAAC,GAAD,CAAaxD,SAAUA,IACvB,cAAC,GAAD,OAIFpF,GAAWC,EAAKkB,OAAS,QAAuBpB,IAAlBD,GAA+BmI,GAC7D,eAAC,IAAMW,SAAP,WACE,cAAC,EAAD,CACEpE,IAAKvE,EAAKJ,GACVD,OAAM,UAAEA,EAAOC,UAAT,QAAmB,GACzBoI,cAAeA,IAGhBrI,EAAOC,IAAU,cAAC,EAAD,CAAYuF,SAAUA,OAI1CpF,GAAYC,EAAKkB,OAAS,QAAgBpB,IAAVF,GAChC,cAAC,GAAD,CAAU4P,WAAY5P,EAAO6P,MAAOzP,EAAKwH,KAAI,SAAAjD,GAAG,OAAIA,EAAIpE,QAAOd,QAASA,SAGtDS,IAAlBD,QACiBC,IAAjBgM,GACA,cAAC,EAAD,2BACMA,GACAzM,EAAQQ,SI/FP6R,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtJ,MAAK,YAAkD,IAA/CuJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,sCCQDO,GAAehS,YAAY,CACpCC,KAAM,UACNT,aAR+B,CAC/BL,QAAS,GACT8S,KAAM,EACNC,YAAa,GAMbhS,SAAU,CACNiS,YAAa,SAAC/R,EAAOC,GACjBD,EAAMjB,QAAUkB,EAAOE,QAAQpB,QAC/BiB,EAAM6R,KAAO5R,EAAOE,QAAQ0R,MAEhCG,gBAAiB,SAAChS,EAAOC,GACrBD,EAAM8R,YAAc7R,EAAOE,Y,GAQnCyR,GAAa3Q,QAFb8Q,G,GAAAA,YACAC,G,GAAAA,gBAUSC,GACT,SAAC,GAAD,IAAGJ,EAAH,EAAGA,KAAMK,EAAT,EAASA,UAAT,OACA,SAAA9Q,GACIvC,EAASE,QACJoT,QAAQ,QACRC,UACAC,OAAOR,EAAOK,GACd9K,MAAM8K,GACNI,UACAtK,MAAK,SAAAjJ,GAAO,OAAIqC,EAAS2Q,GAAY,CAACF,OAAM9S,kBAG1C6S,MAAf,QCnDaW,GAAQC,YAAe,CAClCC,QAAS,CACPnR,IAAKoR,EACLC,QAASC,M,6BCQPpP,GAAYC,YAAW,CACzBoP,WAAY,CACRlE,OAAQ,SAEZ5C,UAAW,CACP+G,cAAe,MAwCjBvH,GAAe,SAAClL,EAA2BE,GAC7C,IACMkL,EAAe,IAAOpL,EAAQ,KACpC,MAAO,CACHuJ,QAAS,WACTF,QAAS+B,EAAe,wCACxB9B,UAAW8B,EAAe,iBALT5B,GAAQ,CAAExJ,QAAOE,YAMvBgJ,SAGbwJ,GAAW,SAAC1S,GACd,IAAM2S,EAAa3S,EAAMhB,OAAOgB,EAAMhB,OAAOuB,OAAS,GAChDlB,EAAO0J,iBAAO4J,EAAWtT,KAAM,CAAC,UAChCiN,EAAQjN,EAAKA,EAAKkB,OAAS,GAAGf,KAEpC,OACI,cAACiM,GAAA,EAAD,CAAqBzH,MAAI,EAAC9B,UAAU,gBAAgB2J,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAvE,SACI,cAACC,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CAAgBC,KAAMlB,GAAsBsB,EAAMrF,MAAM,KAAKC,KAAK,KAAMiF,OAAO,SAA/E,UACI,cAACC,GAAA,EAAD,CACIC,UAAU,MACVC,MAAO,kCAAoCtM,EAAMhB,OAAO,GAAGK,KAAK,GAAGG,KACnE+M,IAAK,kCAAoCvM,EAAMhB,OAAO,GAAGK,KAAK,GAAGG,KACjEgN,MAAOxM,EAAMhB,OAAO,GAAGqL,cAE3B,eAACoC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAYC,cAAY,EAAC3J,QAAQ,KAAKqJ,UAAU,KAAhD,SACKC,IAEL,cAACI,GAAA,EAAD,CAAY1J,QAAQ,QAAQqJ,UAAU,IAAtC,SACKnB,GAAalL,EAAMA,MAAOX,cAdpCW,EAAM6E,KAuBV+N,GA3EC,WACZ,IAAM7R,EAAW0D,KADC,EAEqB+L,aAAY,SAAC7Q,GAAD,OAAsBA,EAAM2S,WAAvE5T,EAFU,EAEVA,QAAS+S,EAFC,EAEDA,YAAaD,EAFZ,EAEYA,KACxB9M,EAAUvB,KAEhBR,qBAAU,kBAAM5B,GFO0B,SAAAA,GAC1CvC,EAASE,QAAQuF,QACZ0D,MAAK,SAAA1D,GAAK,OAAIlD,EAAS4Q,GAAgB1N,YETA,CAAClD,IAC7C4B,qBAAU,kBAAM5B,EAAS6Q,GAAa,CAAEJ,KAAM,EAAGK,UAjBnC,QAiB6D,CAAC9Q,IAE5E,IAIM8R,EACF,eAAC,IAAM7K,SAAP,WACI,cAACyD,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACKjN,EAAQmI,IAAI6L,MAEjB,cAACI,GAAA,EAAD,CACI5Q,UAAWwC,EAAQ8N,WACnBhB,KAAMA,EAAO,EACbvN,MAAO8O,KAAKC,KAAKvB,EA/Bf,IAgCF7L,SAbW,SAACC,EAA+B2L,GACnDzQ,EAAS6Q,GAAa,CAAEJ,KAAMA,EAAO,EAAGK,UApB9B,YAqCd,OACI,eAAC,IAAM7J,SAAP,WACI,cAACwD,GAAA,EAAD,CAAWtJ,UAAWwC,EAAQgH,UAA9B,SACwB,IAAnBhN,EAAQ6B,OAAe,iDAA2BsS,IAEvD,cAAC,GAAD,QCzCCI,GAAaC,aAAe,CACvCjG,QAAS,CACPlL,KAAM,OACNuL,QAAS6F,KACTvF,UAAWwF,QAIfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAACC,GAAA,EAAD,CAAe3G,MAAOoG,GAAtB,UACE,cAACQ,GAAA,EAAD,IACA,cAAC,IAAD,CAAUvB,MAAOA,GAAjB,SACE,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAOwB,KAAK,WAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,GAAD,kBAOZC,SAASC,cAAc,SAMzB7C,O","file":"static/js/main.65f991ca.chunk.js","sourcesContent":["import Dexie from 'dexie';\nimport { Video } from './VideoWrapper';\n\nclass GuessDatabase extends Dexie {\n    guesses: Dexie.Table<DatabaseGuess, number>;\n\n    constructor(database_name: string) {\n        super(database_name);\n        this.version(1).stores({\n            guesses: '++id,date,guess,videos,time_to_guess'\n        });\n        this.guesses = this.table('guesses');\n    }\n}\n\nexport interface DatabaseGuess {\n    id?: number,\n    date: number,\n    guess?: string,\n    videos: Video[],\n    time_to_guess: number,\n}\n\nconst database = new GuessDatabase(\"aniguesser\");\n\nexport default database;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Tag } from './App';\nimport { Guess } from './GuessMatcher';\nimport { Video } from './VideoWrapper';\nimport { AppThunk } from './app/store';\nimport database from './GuessDatabase';\n\ninterface AppState {\n  readonly videos: Video[][],\n  readonly guesses: Guess[],\n  readonly index: number,\n  readonly guess_to_show: number | undefined,\n  readonly playing: boolean,\n  readonly tags: Tag[],\n}\n\nconst initialState: AppState = {\n  videos: [],\n  guesses: [],\n  index: 0,\n  guess_to_show: undefined,\n  playing: false,\n  tags: [],\n};\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    mark_played: (state, action: PayloadAction<number>) => {\n      const video_index = action.payload;\n      const tag_index = state.index;\n      const guess = state.guesses[tag_index]?.guess;\n      const videos = state.videos[tag_index];\n      const playing_video = videos[video_index];\n\n      state.guesses[tag_index] = { guess, answers: playing_video.tags };\n      playing_video.played = true;\n    },\n    set_videos: (state, action: PayloadAction<Video[]>) => {\n      state.videos[state.index] = action.payload;\n    },\n    submit_guess: (state, action: PayloadAction<Guess>) => {\n      state.guess_to_show = state.index;\n      state.guesses[state.index] = action.payload;\n    },\n    show_next_tag: state => {\n      const index = state.index;\n      if ((index + 1) < state.tags.length) {\n        state.index = index + 1;\n      } else {\n        state.index = 0;\n        state.playing = false;\n      }\n      state.guess_to_show = undefined;\n    },\n    start: (state, action: PayloadAction<Tag[]>) => {\n      state.index = 0;\n      state.guesses = [];\n      state.videos = [];\n      state.playing = true;\n      state.tags = action.payload;\n    },\n    change_guess: (state, action: PayloadAction<string>) => {\n      const guess = action.payload;\n      const index = state.index;\n      const videos = state.videos[index];\n      if (videos) {\n        state.guesses[index] = {\n          guess,\n          answers: videos[videos.length - 1]?.tags ?? []\n        };\n      }\n    },\n    skip_tag: state => {\n      state.tags.splice(state.index, 1);\n      if ((state.index) >= state.tags.length) {\n        state.index = 0;\n        state.playing = false;\n      }\n    },\n  },\n});\n\nexport const {\n  mark_played,\n  show_next_tag,\n  start,\n  submit_guess,\n  change_guess,\n  skip_tag,\n  set_videos,\n} = appSlice.actions;\n\nexport const save_and_submit_guess = (time_to_guess: number): AppThunk => (dispatch, getState) => {\n  const state = getState().app;\n  const guesses = state.guesses;\n  const index = state.index;\n  const videos = state.videos[index];\n\n  // someone tried to submit a guess before\n  // the video loaded. just ignore it\n  if (videos === undefined || !videos[0]?.played) {\n    return;\n  }\n\n  // video timed out. submit an empty guess\n  let guess = guesses[index];\n  if (!guess) {\n    guess = {\n      answers: videos[videos.length - 1]?.tags ?? [],\n    };\n  }\n\n  database.guesses.put({\n    date: Date.now(),\n    guess: guess.guess,\n    videos: videos.filter(video => video.played),\n    time_to_guess,\n  }).catch(error => {\n      console.log(error);\n  });\n\n  dispatch(submit_guess(guess));\n};\n\nexport default appSlice.reducer;\n","import { CircularProgress, CircularProgressProps, LinearProgress, LinearProgressProps } from \"@material-ui/core\"\nimport { useEffect } from \"react\";\nimport { useTimer } from \"use-timer\";\n\ntype Props = {\n    duration: number,\n    size?: number,\n    type?: \"linear\" | \"circular\",\n    on_time_over?: () => void,\n    className?: string,\n    interval?: number,\n    count_down?: boolean,\n    show_emergency_color?: boolean,\n}\n\nconst Timer = ({\n    duration,\n    size,\n    type,\n    on_time_over,\n    interval=50,\n    className,\n    count_down=false,\n    show_emergency_color=false,\n}: Props) => {\n    const adjusted_duration = duration * 1000 / interval;\n    const { time, start, reset } = useTimer({\n        endTime: adjusted_duration,\n        interval,\n        onTimeOver: on_time_over,\n    });\n\n    useEffect(() => {\n        start();\n        return reset;\n    }, [reset, start]);\n\n    const normalize = (value: number) => {\n        const adjusted_value = count_down ? adjusted_duration - value : value;\n        return adjusted_value * 100 / adjusted_duration;\n    }\n\n    const progress_props = {\n        color: normalize(time) < 25 && show_emergency_color ? \"secondary\" : \"primary\",\n        variant: \"determinate\",\n        value: normalize(time),\n        className,\n    };\n\n    return type === \"linear\" ?\n        <LinearProgress {...progress_props as LinearProgressProps} />:\n        <CircularProgress size={size} {...progress_props as CircularProgressProps} />\n}\n\nexport default Timer;","import { Fab, makeStyles, TextField } from '@material-ui/core';\nimport { Send } from '@material-ui/icons';\nimport { Autocomplete } from '@material-ui/lab';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport { Tag, useThunkDispatch } from './App';\nimport { matchSorter, MatchSorterOptions } from 'match-sorter';\nimport { change_guess, save_and_submit_guess } from './appSlice';\nimport Timer from './Timer';\n\nconst TAG_TIMER_DURATION = 30;\nconst useStyles = makeStyles({\n    wrapper: {\n      position: 'relative',\n    },\n    fabProgress: {\n      position: 'absolute',\n      top: -6,\n      left: -6,\n    },\n});\n\nconst GuessInput = ({ all_tags }: { all_tags: Tag[] }) => {\n  const dispatch = useThunkDispatch();\n  const classes = useStyles();\n  const [guess, set_guess] = useState<Tag | null>(null);\n\n  const on_guess_change = (_: ChangeEvent<{}>, value: Tag | null) => {\n    set_guess(value);\n    dispatch(change_guess(value?.name ?? \"\"));\n  }\n\n  const on_form_submitted = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (guess) {\n      dispatch(save_and_submit_guess(0));\n    }\n  }\n\n  return (\n    <form id=\"guess\" onSubmit={on_form_submitted}>\n      <div id=\"guess-input\">\n        <Autocomplete\n          selectOnFocus\n          clearOnBlur\n          autoHighlight\n          autoComplete\n          disableClearable\n          clearOnEscape\n          options={all_tags}\n          style={{ width: 300 }}\n          filterOptions={filter_options}\n          getOptionLabel={tag => tag.name}\n          onChange={on_guess_change}\n          renderInput={(params) => <TextField {...params} label=\"Guess the title\" variant=\"filled\" autoFocus />}\n        />\n      </div>\n      <div className={classes.wrapper}>\n        <Timer\n          size={68}\n          duration={TAG_TIMER_DURATION}\n          on_time_over={() => dispatch(save_and_submit_guess(TAG_TIMER_DURATION))}\n          count_down={true}\n          show_emergency_color={true}\n          className={classes.fabProgress}\n        />\n        <Fab type=\"submit\" area-label=\"submit\">\n          <Send />\n        </Fab>\n      </div>\n    </form>\n  );\n};\n\nconst match_sorter_options: MatchSorterOptions<Tag> = {\n  keys: [tag => tag.name],\n  baseSort: (tag_a, tag_b) => tag_b.item.count - tag_a.item.count,\n};\n\nconst filter_options = (options: Tag[], { inputValue }: { inputValue: string}) =>\n  inputValue ? matchSorter(options, inputValue, match_sorter_options).slice(0, 100) : [];\n  \nexport default GuessInput;","import { Tag, TagType } from \"./App\";\n\nconst API_URL = \"/api/\";\n\nexport type VideoResponse = {\n    file_url: string,\n    id: number,\n    tags: string,\n    preview_url: string,\n};\n\nexport async function fetch_all_tags() {\n    const response = await fetch(API_URL+'tag.json?limit=0&order=count&type='+TagType.COPYRIGHT);\n    const tags: Tag[] = (await response.json()).map(map_tag);\n    return tags.filter(({ count }) => count > 0);\n}\n\nexport async function fetch_random_videos(tag: Tag, limit = 8): Promise<VideoResponse[]> {\n    const url = API_URL+'post.json?tags=rating:safe order:random ext:mp4,webm ' + tag.name.split(\" \").join(\"_\") + \"&limit=\" + limit;\n    const response = await fetch(url);\n    return await response.json();\n}\n\nconst map_tag = (jsonTag: any): Tag => ({\n    count: jsonTag.count,\n    id: jsonTag.id,\n    name: jsonTag.name.split(\"_\").join(\" \"),\n});","import { CircularProgress } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tag, useThunkDispatch } from \"./App\";\nimport { mark_played, set_videos, skip_tag } from \"./appSlice\";\nimport { fetch_random_videos } from \"./SakugaAPI\";\nimport VideoWrapper, { Video } from \"./VideoWrapper\";\n\ntype Props = {\n    tag: Tag,\n    videos: Video[],\n    video_wrapper: VideoWrapper,\n};\n\nconst VideoPlayer = ({ tag, videos, video_wrapper }: Props) => {\n    const dispatch = useThunkDispatch();\n    const [loading, set_loading] = useState(true);\n    const [index, set_index] = useState(0);\n\n    useEffect(() => {\n        let mounted = true;\n        set_index(0);\n        fetch_random_videos(tag)\n            .then(video_responses => video_responses.map(video_wrapper.wrap))\n            .then(videos => {\n                if (mounted) {\n                    if (videos.length > 0) {\n                        set_index(0);\n                        dispatch(set_videos(videos));\n                    } else {\n                        dispatch(skip_tag());\n                    }\n                }\n            })\n        return () => { mounted = false }; \n    }, [tag, video_wrapper, dispatch]);\n\n    const play_next_video = () => {\n        if (videos.length > 1) {\n            const new_index = (index + 1) % videos.length;\n            set_index(new_index);\n        }\n    }\n\n    return (\n        <React.Fragment>\n        {(videos.length === 0 || loading) && <CircularProgress className=\"video-loading\" />}\n        <video\n            muted\n            onWaiting={() => set_loading(true)}\n            onCanPlay={() => set_loading(false)}\n            onPlay={() => dispatch(mark_played(index))}\n            preload=\"auto\"\n            autoPlay\n            loop={videos.length === 1}\n            onError={play_next_video}\n            src={videos[index]?.url}\n            onEnded={() => {console.log(\"video ended\"); set_loading(true); play_next_video()}}\n        />\n        </React.Fragment>\n    );\n}\n\nexport default VideoPlayer;","import { Tag, useThunkDispatch } from './App';\nimport { sortBy } from 'lodash';\nimport Timer from './Timer';\nimport { show_next_tag } from './appSlice';\nimport { makeStyles, Paper } from '@material-ui/core';\nimport { MatchResult } from './GuessMatcher';\n\nconst RESULT_DISPLAY_DURATION = 4;\n\nconst useStyles = makeStyles({\n    timer: {\n      width: \"100%\",\n    },\n    root: {\n        flexBasis: \"400px\",\n    },\n});\n\nexport type GuessResult = \"correct\" | \"missing\" | \"incorrect\";\n\nexport interface GuessResultUIProps extends MatchResult {\n    readonly guess?: string,\n    readonly answers: Tag[],\n}\n\nconst GuessResultUI = ({guess, answers, closest_answer, result, is_exact}: GuessResultUIProps) => {\n    const dispatch = useThunkDispatch();\n    const classes = useStyles();\n\n    const timer = (\n        <Timer\n            duration={RESULT_DISPLAY_DURATION}\n            on_time_over={() => dispatch(show_next_tag())}\n            type = \"linear\"\n            className={classes.timer}\n        />\n    );\n    return (\n        <Paper id=\"guess-result\" className={classes.root}>\n            {result !== \"missing\" && <p>{guess}</p>}\n            {result === \"correct\" && !is_exact && <p>({closest_answer})</p> }\n            <h1>{{\n                correct: \"🎉 is correct 🎊\",\n                incorrect: \"is incorrect\",\n                missing: \"No guess\",\n            }[result]}</h1>\n            {result !== \"correct\" && answer_ui(answers)}\n            {timer}\n        </Paper>\n    )\n}\n\nconst answer_ui = (answers: Tag[]) => {\n    if (answers.length > 0) {\n        return <p>it was {sortBy(answers, tag => tag.count)[answers.length - 1].name}</p>\n    } else {\n        return null;\n    }\n}\n\nexport default GuessResultUI;","import Fuse from \"fuse.js\";\nimport { Tag } from \"./App\";\nimport { GuessResult } from \"./GuessResultUI\";\n\nexport type MatchResult = {\n    readonly result: GuessResult,\n    readonly is_exact: boolean,\n    readonly closest_answer?: string,\n}\n\nconst Matches = (guess: Guess): MatchResult => {\n    if (!guess.guess) {\n        return {\n            result: \"missing\",\n            is_exact: false,\n        };\n    }\n    const options = {\n        includeScore: true,\n        threshold: 0.1,\n    };\n    const fuse = new Fuse(guess.answers.map(tag => tag.name), options);\n    const search_results = fuse.search(guess.guess);\n    return {\n        result: search_results.length > 0 ? \"correct\" : \"incorrect\",\n        is_exact: search_results[0]?.score === 0,\n        closest_answer: search_results[0]?.item,\n    }\n}\n\nexport type Guess = {\n    readonly answers: Tag[],\n    readonly guess?: string,\n}\n\nexport default Matches;","import { Tag } from \"./App\";\nimport { VideoResponse } from \"./SakugaAPI\";\nimport { Map } from \"immutable\";\n\nclass VideoWrapper {\n    readonly tags_by_name: Map<string, Tag>;\n\n    constructor(all_tags: Tag[]) {\n        this.tags_by_name = Map(all_tags.map(tag => [tag.name, tag]));\n    }\n\n    readonly wrap = (video_response: VideoResponse): Video => {\n        const tags = video_response.tags\n            .split(\" \")\n            .map(tag_string => tag_string.split(\"_\").join(\" \"))\n            .map(tag_string => this.tags_by_name.get(tag_string))\n            .filter(tag => tag !== undefined) as Tag[];\n\n        return {\n            tags,\n            url: video_response.file_url,\n            id: video_response.id,\n            preview_url: video_response.preview_url,\n        }\n    }\n}\n\nexport type Video = {\n    readonly url: string,\n    readonly id: number,\n    readonly tags: Tag[],\n    readonly preview_url: string,\n    readonly played?: boolean,\n};\n\nexport default VideoWrapper;","import { Button, CircularProgress } from \"@material-ui/core\";\nimport React from \"react\";\nimport sample from 'lodash/sample';\nimport { useThunkDispatch, Tag } from \"./App\";\nimport { start } from './appSlice';\n\nconst StartButton = ({ all_tags }: { all_tags: Tag[] }) => {\n\n    const dispatch = useThunkDispatch();\n    const is_ready = all_tags.length > 0;\n\n    return is_ready ?\n        <Button\n            variant=\"contained\"\n            onClick={() => dispatch(start(choose_random_tags(all_tags)))}\n            id=\"start\">\n            Start\n        </Button> :\n        <CircularProgress />\n}\n\nexport function choose_random_tags(tags: Tag[]): Tag[] {\n    return POPULARITY_LIST.map(({ max, min }) =>\n        sample(tags.filter(({ count }) => max >= count && count >= min))\n    ) as Tag[];\n}\n\ntype Popularity = { \"max\": number, \"min\": number };\n\nexport const POPULARITY_LIST: Popularity[] = [\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 1, \"min\": 1 },\n];\n\nexport default StartButton;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.css';\nimport GuessInput from './GuessInput';\nimport VideoPlayer from './VideoPlayer';\nimport GuessResultUI from './GuessResultUI';\nimport guess_matches from './GuessMatcher';\nimport { fetch_all_tags } from './SakugaAPI';\nimport VideoWrapper from './VideoWrapper';\nimport { RootState, store } from './app/store';\nimport GameSummary, { Round } from './GameSummary';\nimport Progress from './Progress';\nimport StartButton from './StartButton';\nimport Navigation from './Navigation';\n\nexport enum TagType {\n  GENERAL = 0,\n  ARTIST = 1,\n  COPYRIGHT = 3,\n  CHARACTER = 4,\n}\n\nexport type Tag = {\n  readonly count: number,\n  readonly id: number,\n  readonly name: string,\n};\n\nexport const useThunkDispatch = () => useDispatch<typeof store.dispatch>();\n\nfunction App() {\n  const {\n    guesses,\n    index,\n    videos,\n    guess_to_show,\n    playing,\n    tags,\n  } = useSelector((state: RootState) => state.app);\n  const rounds: Round[] = useSelector((state: RootState) => {\n    const app = state.app;\n    const number_of_rounds = app.tags.length;\n    const rounds = [];\n    for (let i = 0; i < number_of_rounds; i++) {\n      rounds.push({\n        tag: app.tags[i],\n        videos: app.videos[i]?.filter(video => video.played),\n        guess: app.guesses[i],\n      });\n    }\n    return rounds;\n  });\n  const match_result = useSelector((state: RootState) => {\n    const guess_to_show = state.app.guess_to_show;\n    return guess_to_show === undefined ?\n      undefined :\n      guess_matches(state.app.guesses[guess_to_show]!);\n  });\n\n  const [all_tags, set_all_tags] = useState<Tag[]>([]);\n  const [video_wrapper, set_video_wrapper] = useState<VideoWrapper | undefined>(undefined);\n\n  useEffect(() => {\n    fetch_all_tags().then(tags => {\n      set_all_tags(tags);\n      set_video_wrapper(new VideoWrapper(tags));\n    });\n  }, []);\n\n  if (!playing && guesses.length > 0) {\n    return (\n      <React.Fragment>\n        <GameSummary rounds={rounds} all_tags={all_tags} />\n        <Navigation />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div id=\"game\">\n      {\n        !playing &&\n        guesses.length === 0 &&\n        <React.Fragment>\n          <StartButton all_tags={all_tags} />\n          <Navigation />\n        </React.Fragment>\n      }\n      {\n        playing && tags.length > 0 && guess_to_show === undefined && video_wrapper &&\n        <React.Fragment>\n          <VideoPlayer\n            tag={tags[index]}\n            videos={videos[index] ?? []}\n            video_wrapper={video_wrapper}\n          />\n\n          {videos[index] && <GuessInput all_tags={all_tags} />}\n        </React.Fragment>\n      }\n      {\n        playing && (tags.length > 0) && index !== undefined &&\n        <Progress activeStep={index} steps={tags.map(tag => tag.name)} guesses={guesses} />\n      }\n      {\n        guess_to_show !== undefined &&\n        match_result !== undefined &&\n        <GuessResultUI\n          {...match_result}\n          {...guesses[guess_to_show]}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { Button, Card, CardActionArea, CardContent, CardMedia, Container, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport { Tag, useThunkDispatch } from \"./App\";\nimport { start } from \"./appSlice\";\nimport Matches, { Guess } from \"./GuessMatcher\";\nimport { Video } from \"./VideoWrapper\";\nimport { choose_random_tags } from './StartButton';\n\nexport type GameSummaryProps = {\n    rounds: Round[],\n    all_tags: Tag[],\n};\n\nexport type Round = {\n    tag: Tag,\n    videos: Video[],\n    guess: Guess,\n}\n\nconst SAKUGABOORU_URL = \"https://www.sakugabooru.com/post\";\nexport const SAKUGABOORU_TAG_URL = SAKUGABOORU_URL + \"?tags=\";\n\nconst render_guess = (guess: Guess) => {\n    const match_result = Matches(guess);\n    const guess_string = \"\\\"\" + guess.guess + \"\\\" \";\n    return {\n        missing: \"No guess\",\n        correct: guess_string + \"🎉 was correct 🎊\",\n        incorrect: guess_string + \"was incorrect\",\n    }[match_result.result]\n}\n\nconst useStyles = makeStyles({\n    root: {\n        minHeight: 250,\n    }\n});\n\nconst GameSummary = ({rounds, all_tags}: GameSummaryProps) => {\n    const dispatch = useThunkDispatch();\n    const classes = useStyles();\n\n    const round_summary = (round: Round, index: number) => {\n        return (\n            <Grid key={index} item className=\"round-summary\" xs={12} sm={6} md={4}>\n                <Card classes={classes}>\n                    <CardActionArea href={SAKUGABOORU_TAG_URL + round.tag.name.split(\" \").join(\"_\")} target=\"_blank\">\n                        <CardMedia\n                            component=\"img\"\n                            title={\"Image thumbnail of a clip from \" + round.videos[0].tags[0].name}\n                            alt={\"Image thumbnail of a clip from \" + round.videos[0].tags[0].name}\n                            image={round.videos[0].preview_url}\n                        />\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                {round.tag.name}\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\">\n                                {render_guess(round.guess)}\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    }    \n\n    return (\n        <Container>\n            <Grid container spacing={2}>\n                {rounds.map(round_summary)}\n            </Grid>\n            <div id=\"play-again\">\n                <Button\n                    variant=\"contained\"\n                    onClick={() => dispatch(start(choose_random_tags(all_tags)))}\n                    color=\"primary\"\n                >\n                        Play Again\n                </Button>\n            </div>\n        </Container>\n    )\n}\n\nexport default GameSummary;","import { makeStyles, Step, StepConnector, StepIconProps, StepLabel, Stepper, withStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport guess_matches, { Guess } from \"./GuessMatcher\";\n\n\nconst useProgressStepIconStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        height: 22,\n        alignItems: 'center',\n        color: theme.palette.background.default,\n    },\n    active: {\n        color: theme.palette.text.primary,\n    },\n    circle: {\n        width: 6,\n        height: 6,\n        borderRadius: '50%',\n        border: \"1px solid #aaa\",\n        backgroundColor: 'currentColor',\n    },\n    completed: {\n        color: theme.palette.secondary.main,\n        zIndex: 1,\n        fontSize: 18,\n        border: \"none\",\n    },\n    correct: {\n        color: theme.palette.primary.main,\n    }\n}));\n\nconst ProgressStepIcon = (correct: boolean) => {\n    const classes = useProgressStepIconStyles();\n    return  (props: StepIconProps) => {\n        const { active, completed } = props;\n    \n        let progressClass = classes.circle;\n        if (completed) {\n            progressClass += \" \" + classes.completed;\n        }\n        if (correct) {\n            progressClass += \" \" + classes.correct;\n        }\n    \n        return (\n            <div\n                className={clsx(classes.root, {\n                    [classes.active]: active,\n                })}\n            >\n                <div className={progressClass} />\n            </div>\n        );\n    };\n}\n\nconst progressStyles = makeStyles({\n    root: {\n        background: \"rgba(2, 2, 2, .5)\",\n        zIndex: 100000,\n        height: 22,\n        padding: 8,\n        margin: 5,\n        borderRadius: \"10px\",\n        position: \"fixed\",\n        bottom: 10,\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n    }\n})\n\n\nconst ProgressConnector = withStyles({\n    root: {\n        display: \"none\",\n    }\n})(StepConnector);\n\nconst Progress = ({ activeStep, steps, guesses }: { activeStep: number, steps: string[], guesses: Guess[] }) => {\n    const classes = progressStyles();\n    return (\n        <Stepper activeStep={activeStep} className={classes.root} connector={<ProgressConnector />}>\n            {steps.map((label, index) => {\n                const is_correct = guesses[index] && guess_matches(guesses[index]).result === \"correct\";\n                return (\n                    <Step key={label}>\n                        <StepLabel StepIconComponent={ProgressStepIcon(is_correct)}></StepLabel>\n                    </Step>\n                );\n            })}\n        </Stepper>\n    );\n}\n\nexport default Progress;","import { BottomNavigation, BottomNavigationAction, Box, makeStyles } from \"@material-ui/core\";\nimport { SportsEsports, Restore } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n    root: {\n        position: \"fixed\",\n        zIndex: 999,\n        bottom: 0,\n        width: \"100%\",\n        marginTop: -56,\n    }\n});\n\nconst Navigation = () => {\n    const pathname = window.location.pathname;\n    const [value, setValue] = useState(pathname);\n    const classes = useStyles();\n\n    return (\n        <Box className={classes.root}>\n            <BottomNavigation\n                value={value}\n                onChange={(_, newValue) => {\n                    setValue(newValue);\n                }}\n                showLabels\n            >\n                <BottomNavigationAction label=\"Play\" value=\"/\" icon={<SportsEsports />} component={Link} to=\"/\" />\n                <BottomNavigationAction label=\"History\" value=\"/history\" icon={<Restore />} component={Link} to=\"/history\" />\n            </BottomNavigation>\n        </Box>\n    );\n}\n\nexport default Navigation;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import database from './GuessDatabase';\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"./app/store\";\nimport { DatabaseGuess } from \"./GuessDatabase\";\n\ninterface HistoryState {\n    readonly guesses: DatabaseGuess[],\n    readonly page: number,\n    readonly num_guesses: number,\n}\n\nconst initialState: HistoryState = {\n    guesses: [],\n    page: 0,\n    num_guesses: 0,\n}\n\nexport const historySlice = createSlice({\n    name: 'history',\n    initialState,\n    reducers: {\n        set_guesses: (state, action: PayloadAction<{page: number, guesses: DatabaseGuess[]}>) => {\n            state.guesses = action.payload.guesses;\n            state.page = action.payload.page;\n        },\n        set_num_guesses: (state, action: PayloadAction<number>) => {\n            state.num_guesses = action.payload;\n        },\n    }\n});\n\nexport const {\n    set_guesses,\n    set_num_guesses,\n} = historySlice.actions;\n\nexport const load_num_pages = (): AppThunk => dispatch => {\n    database.guesses.count()\n        .then(count => dispatch(set_num_guesses(count)));\n}\n\ntype Page = { page: number, page_size: number };\n\nexport const load_guesses =\n    ({ page, page_size }: Page): AppThunk =>\n    dispatch => {\n        database.guesses\n            .orderBy(\"date\")\n            .reverse()\n            .offset(page * page_size)\n            .limit(page_size)\n            .toArray()\n            .then(guesses => dispatch(set_guesses({page, guesses})));\n    }\n\nexport default historySlice.reducer;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport appReducer from '../appSlice';\nimport historyReducer from '../historySlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    history: historyReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Tag, useThunkDispatch } from \"./App\";\nimport { RootState } from \"./app/store\";\nimport { DatabaseGuess } from \"./GuessDatabase\";\nimport { load_guesses, load_num_pages } from \"./historySlice\";\nimport { sortBy } from 'lodash';\nimport { Pagination } from \"@material-ui/lab\";\nimport { Card, CardActionArea, CardContent, CardMedia, Container, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport { SAKUGABOORU_TAG_URL } from \"./GameSummary\";\nimport Matches from \"./GuessMatcher\";\nimport Navigation from \"./Navigation\";\n\nconst PAGE_SIZE = 12;\n\nconst useStyles = makeStyles({\n    pagination: {\n        margin: \"1em 0\",\n    },\n    container: {\n        paddingBottom: 56,\n    }\n})\n\nconst History = () => {\n    const dispatch = useThunkDispatch();\n    const { guesses, num_guesses, page } = useSelector((state: RootState) => state.history);\n    const classes = useStyles();\n\n    useEffect(() => dispatch(load_num_pages()), [dispatch]);\n    useEffect(() => dispatch(load_guesses({ page: 0, page_size: PAGE_SIZE })), [dispatch]);\n\n    const on_page_change = (_: React.ChangeEvent<unknown>, page: number) => {\n        dispatch(load_guesses({ page: page - 1, page_size: PAGE_SIZE }));\n    }\n\n    const game_history = (\n        <React.Fragment>\n            <Grid container spacing={2}>\n                {guesses.map(guess_ui)}\n            </Grid>\n            <Pagination\n                className={classes.pagination}\n                page={page + 1}\n                count={Math.ceil(num_guesses / PAGE_SIZE)}\n                onChange={on_page_change}\n            />\n        </React.Fragment>\n    );\n\n    return (\n        <React.Fragment>\n            <Container className={classes.container}>\n                {guesses.length === 0 ? <h1>No game history</h1> : game_history}\n            </Container>\n            <Navigation />\n        </React.Fragment>\n    )\n};\n\nconst render_guess = (guess: string | undefined, answers: Tag[]) => {\n    const match_result = Matches({ guess, answers });\n    const guess_string = \"\\\"\" + guess + \"\\\" \";\n    return {\n        missing: \"No guess\",\n        correct: guess_string + \"🎉 was correct 🎊\",\n        incorrect: guess_string + \"was incorrect\",\n    }[match_result.result]\n}\n\nconst guess_ui = (guess: DatabaseGuess) => {\n    const last_video = guess.videos[guess.videos.length - 1];\n    const tags = sortBy(last_video.tags, [\"count\"]);\n    const title = tags[tags.length - 1].name;\n\n    return (\n        <Grid key={guess.id} item className=\"round-summary\" xs={12} sm={6} md={4}>\n            <Card>\n                <CardActionArea href={SAKUGABOORU_TAG_URL + title.split(\" \").join(\"_\")} target=\"_blank\">\n                    <CardMedia\n                        component=\"img\"\n                        title={\"Image thumbnail of a clip from \" + guess.videos[0].tags[0].name}\n                        alt={\"Image thumbnail of a clip from \" + guess.videos[0].tags[0].name}\n                        image={guess.videos[0].preview_url}\n                    />\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {title}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            {render_guess(guess.guess, tags)}\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </Grid>\n    );\n}\n\nexport default History;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { lightBlue, red } from '@material-ui/core/colors';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { CssBaseline } from '@material-ui/core';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport History from './History';\n\nexport const dark_theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: lightBlue,\n    secondary: red\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={dark_theme}>\n      <CssBaseline />\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route path=\"/history\">\n              <History />\n            </Route>\n            <Route path=\"/\">\n              <App />\n            </Route>\n          </Switch>\n        </Router>\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.querySelector('body')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}