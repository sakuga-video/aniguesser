{"version":3,"sources":["GuessInput.tsx","VideoPlayer.tsx","App.tsx","GuessResultUI.tsx","Score.tsx","GuessMatcher.ts","reportWebVitals.ts","index.tsx"],"names":["match_sorter_options","keys","tag","name","baseSort","tag_a","tag_b","item","count","filter_options","options","inputValue","matchSorter","slice","GuessInput","on_guess_changed","on_guess_submitted","all_tags","id","onSubmit","event","preventDefault","Autocomplete","selectOnFocus","clearOnBlur","autoHighlight","autoComplete","disableClearable","clearOnEscape","style","width","filterOptions","getOptionLabel","onChange","value","renderInput","params","TextField","label","variant","IconButton","type","Icon","TIMER_LENGTH","normalize","increment","page","VideoPlayer","TagType","current_video","set_current_video","play_next_tag","useState","undefined","set_page","timer","set_timer","useEffect","mounted","fetch_video","then","video","console","log","interval","setInterval","clearInterval","a","random","url","replaceAll","fetch","response","json","videos","file_url","file_ext","Fragment","CircularProgress","color","className","muted","preload","autoPlay","src","onEnded","next_page","GuessResultUI","guess_result","is_correct","guess","correct_answer","Score","score","max_score","Matches","Fuse","answer","includeScore","threshold","distance","search","length","RESULT_DISPLAY_DURATION","guess_matches","Matcher","COPYRIGHT","tags","map","jsonTag","ambiguous","filter","popularity_list","App","loading_progress","set_loading_progress","set_all_tags","selected_tags","set_selected_tags","playing","set_playing","has_played","set_has_played","Map","guesses","set_guesses","set_score","index","set_index","guess_to_show","set_guess_to_show","progress","load","fetch_tags","recalculate_score","play_next","reset","total","forEach","Button","disabled","onClick","max","min","sample","get","new_guesses","set","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","dark_theme","createMuiTheme","palette","primary","lightBlue","secondary","red","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.4f64da36.chunk.js","sourcesContent":["import { Icon, IconButton, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { ChangeEvent, FormEvent } from 'react';\nimport { Tag } from './App';\nimport { matchSorter, MatchSorterOptions } from 'match-sorter';\n\ntype Props = {\n  on_guess_changed: (guess: string) => void,\n  on_guess_submitted: () => void,\n  all_tags: Tag[],\n}\n\nconst GuessInput = ({\n    on_guess_changed,\n    on_guess_submitted,\n    all_tags\n  }: Props) => {\n  const on_guess_change = (event: ChangeEvent<{}>, value: Tag | null) => on_guess_changed(value?.name ?? \"\");\n  \n  const on_form_submitted = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    on_guess_submitted();\n  }\n\n  return (\n    <form id=\"guess\" onSubmit={on_form_submitted}>\n      <Autocomplete\n        selectOnFocus\n        clearOnBlur\n        autoHighlight\n        autoComplete\n        disableClearable\n        clearOnEscape\n        options={all_tags}\n        style={{ width: 300 }}\n        filterOptions={filter_options}\n        getOptionLabel={tag => tag.name}\n        onChange={on_guess_change}\n        renderInput={(params) => <TextField {...params} label=\"Guess the title\" variant=\"filled\" />}\n      />\n      <IconButton type=\"submit\">\n        <Icon>send</Icon>\n      </IconButton>\n    </form>\n  );\n};\n\nconst match_sorter_options: MatchSorterOptions<Tag> = {\n  keys: [tag => tag.name],\n  baseSort: (tag_a, tag_b) => tag_b.item.count - tag_a.item.count,\n};\n\nconst filter_options = (options: Tag[], { inputValue }: { inputValue: string}) =>\n  inputValue ? matchSorter(options, inputValue, match_sorter_options).slice(0, 100) : [];\n  \nexport default GuessInput;","import { CircularProgress } from \"@material-ui/core\";\nimport { random } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { Tag, Video } from \"./App\";\n\ntype Props = {\n    tag: Tag,\n    current_video: Video | undefined,\n    set_current_video: (video: Video) => void,\n    play_next_tag: () => void,\n};\n\nconst VideoPlayer = ({ tag, current_video, set_current_video, play_next_tag }: Props) => {\n    const [page, set_page] = useState<number | undefined>(undefined);\n    const [timer, set_timer] = useState<number>(0);\n    \n    useEffect(() => {\n        let mounted = true;\n        fetch_video({ tag }).then(video => {\n            if (mounted) {\n                set_current_video(video);\n            }\n        });\n        return () => { mounted = false };\n    }, [tag, set_current_video]);\n\n    useEffect(() => {\n        let timer = 0;\n        const timer_step_size = 50;\n        console.log(\"starting interval\");\n        const interval = setInterval(() => {\n            if (timer >= TIMER_LENGTH) {\n                timer = 0;\n                set_timer(timer);\n                play_next_tag();\n            } else {\n                timer += timer_step_size;\n                set_timer(timer);\n            }\n        }, timer_step_size);\n        return () => {clearInterval(interval);console.log(\"clearing interval\");};\n    }, [tag]);\n\n    const play_next_video = () => {\n        const next_page = increment(page!, tag);\n        fetch_video({ tag, page: next_page }).then(video => {\n            set_current_video(video)\n        });\n    }\n\n    const fetch_video = async ({ tag, page = undefined }: { tag: Tag, page?: number }): Promise<Video> => {\n        page = page ?? random(tag.count);\n        const url = '/api/post.json?limit=1&page=' + page + '&tags=' + tag.name.replaceAll(\" \", \"_\");\n        const response = await fetch(url);\n        const videos: VideoResponse[] = await response.json();\n\n        if (videoIsValid(videos[0])) {\n            set_page(page);\n            return {\n                url: videos[0].file_url,\n                id: videos[0].id,\n                tag: tag,\n            };\n        } else {\n            return fetch_video({\n                tag,\n                page: increment(page, tag)\n            });\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <CircularProgress color={normalize(timer) < 25 ? \"secondary\" : \"primary\"} key={tag.id} variant=\"determinate\" value={normalize(timer)} className=\"controls timer\" />\n            <video muted preload=\"auto\" autoPlay src={current_video?.url} onEnded={play_next_video} />\n        </React.Fragment>\n    )\n}\n\nconst TIMER_LENGTH = 30_000;\n\nconst normalize = (value: number) => (TIMER_LENGTH - value) * 100 / TIMER_LENGTH;\n\nconst increment = (page: number, tag: Tag) => (page + 1) % tag.count;\n\nfunction videoIsValid(video: any) {\n    return video\n        && video.file_url\n        && (video.file_ext === \"mp4\" || video.file_ext === \"webm\")\n        && video.id;\n}\n\ntype VideoResponse = {\n    file_url: string,\n    id: number,\n};\n\nexport default VideoPlayer;","import React, { useEffect, useState } from 'react';\nimport sample from 'lodash/sample';\nimport './App.css';\nimport GuessInput from './GuessInput';\nimport VideoPlayer from './VideoPlayer';\nimport Button from '@material-ui/core/Button';\nimport { Map } from 'immutable';\nimport GuessResultUI from './GuessResultUI';\nimport Score from './Score';\nimport { CircularProgress } from '@material-ui/core';\nimport Matcher from './GuessMatcher';\n\nenum TagType {\n  GENERAL = 0,\n  ARTIST = 1,\n  COPYRIGHT = 3,\n  CHARACTER = 4,\n}\n\nexport type Tag = {\n  readonly ambiguous: boolean,\n  readonly count: number,\n  readonly id: number,\n  readonly name: string,\n  readonly type: TagType,\n};\n\nexport type Video = {\n  readonly url: string,\n  readonly id: number,\n  readonly tag: Tag,\n};\n\ntype Popularity = { \"max\": number, \"min\": number };\n\nfunction App() {\n  const [loading_progress, set_loading_progress] = useState<number>(0);\n  const [all_tags, set_all_tags] = useState<Tag[]>([]);\n  const [selected_tags, set_selected_tags] = useState<Tag[]>([]);\n  const [playing, set_playing] = useState<boolean>(false);\n  const [has_played, set_has_played] = useState<boolean>(false);\n  const [guesses, set_guesses] = useState<Map<Tag, string>>(Map());\n  const [current_video, set_current_video] = useState<Video | undefined>(undefined);\n  const [score, set_score] = useState<number>(0);\n  const [index, set_index] = useState<number>(0);\n  const [guess_to_show, set_guess_to_show] = useState<Tag | undefined>(undefined);\n  const [timer, set_timer] = useState<number>(0);\n\n  useEffect(() => {\n    let progress = 10;\n    set_loading_progress(progress);\n    const load = setInterval(() => {\n      if (progress < 90) {\n        progress+=10;\n        set_loading_progress(progress);\n      } else {\n        clearInterval(load);\n      }\n    }, 100);\n    fetch_tags().then(tags => {\n      set_loading_progress(100);\n      set_all_tags(tags);\n    });\n    return () => clearInterval(load);\n  }, []);\n\n  useEffect(() => {\n    if (guess_to_show) {\n      recalculate_score(guesses);\n      const interval_duration = 50;\n      let timer = 0;\n      const interval = setInterval(() => {\n        if (timer >= RESULT_DISPLAY_DURATION) {\n          set_guess_to_show(undefined);\n          timer = 0;\n        } else {\n          timer += interval_duration;\n        }\n        set_timer(timer);\n      }, interval_duration);\n      return () => clearInterval(interval);\n    }\n  }, [guesses, guess_to_show]);\n\n  const play_next = () => {\n    const tag = selected_tags[index];\n    set_guess_to_show(tag);\n\n    if ((index + 1) < selected_tags.length) {\n        set_index(index + 1);\n    } else {\n        reset();\n    }\n  }\n  \n  const start = () => {\n    set_selected_tags(choose_random_tags(all_tags));\n    set_playing(true);\n    set_has_played(true);\n    set_guesses(Map());\n    set_score(0);\n    set_index(0);\n  }\n\n  const reset = () => {\n    set_playing(false);\n    set_selected_tags([]);\n  }\n\n  const set_guess = (guess: string) => {\n    const tag = selected_tags[index];\n    if (tag) {\n      const new_guesses = guesses.set(tag, guess);\n      set_guesses(new_guesses);\n    }\n  }\n\n  const lock_in_guess = () => {\n    const tag = selected_tags[index];\n    const guess = guesses.get(tag);\n    if (guess) {\n      play_next();\n    }\n  }\n\n  const recalculate_score = (guesses: Map<Tag, string>) => {\n    let total = 0;\n    guesses.forEach((guess, tag) => {\n      if (guess_matches(guess, tag)) {\n        total += 1;\n      }\n    })\n    set_score(total);\n  }\n\n  return (\n    <React.Fragment>\n      {guess_to_show && <CircularProgress key={index} variant=\"determinate\" value={normalize(timer)} className=\"controls timer\" />}\n      {has_played && <Score score={score} max_score={index} />}\n      {all_tags.length === 0 && <CircularProgress variant=\"determinate\" value={loading_progress} />}\n      {!playing && <Button variant=\"contained\" disabled={all_tags.length === 0} onClick={start} id=\"start\">Start</Button>}\n      {playing && selected_tags.length > 0 && !guess_to_show && <VideoPlayer\n        tag={selected_tags[index]}\n        current_video={current_video}\n        set_current_video={set_current_video}\n        play_next_tag={play_next} />}\n      {\n        guess_to_show &&\n        <GuessResultUI\n          guess_result={{\n            guess: guesses.get(guess_to_show),\n            correct_answer: guess_to_show.name,\n            is_correct: guess_matches(guesses.get(guess_to_show), guess_to_show),\n          }} />\n      }\n      {\n        playing && !guess_to_show &&\n        <GuessInput\n          on_guess_changed={set_guess}\n          on_guess_submitted={lock_in_guess}\n          all_tags={all_tags}\n        />\n      }\n    </React.Fragment>\n  );\n}\n\nconst RESULT_DISPLAY_DURATION = 4_000;\n\nconst normalize = (value: number) => value * 100 / RESULT_DISPLAY_DURATION;\n\nfunction guess_matches(guess: string | undefined, tag: Tag) {\n  return guess !== undefined && Matcher({guess, answer: tag.name});\n}\n\nasync function fetch_tags() {\n  const response = await fetch('/api/tag.json?limit=0&order=count&type='+TagType.COPYRIGHT);\n  const tags: Tag[] = (await response.json()).map((jsonTag: any) => ({\n    ambiguous: jsonTag.ambiguous,\n    count: jsonTag.count,\n    id: jsonTag.id,\n    name: jsonTag.name.replaceAll(\"_\", \" \"),\n    type: jsonTag.type,\n  }));\n  return tags.filter(({ count }) => count > 0);\n}\n\nfunction choose_random_tags(tags: Tag[]): Tag[] {\n  return popularity_list.map(({ max, min }) =>\n    sample(tags.filter(({ count }) => max >= count && count >= min))\n  ) as Tag[];\n}\n\nconst popularity_list: Popularity[] = [\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 25, \"min\": 10 },\n  { \"max\": 1, \"min\": 1 },\n];\n\nexport default App;\n","import React from 'react';\n\nconst GuessResultUI = ({guess_result}: {guess_result: GuessResult | undefined}) => {\n    if (guess_result === undefined) {\n        return null;\n    }\n    if (guess_result.is_correct && guess_result.guess) {\n        return (\n            <div id=\"guess-result\" className=\"controls correct\">\n                <p>{guess_result.guess}</p>\n                {\n                    guess_result.guess !== guess_result.correct_answer &&\n                    <p>({guess_result.correct_answer})</p>\n                }\n                <h1>🎉 is correct 🎊</h1>\n            </div>\n        )\n    } else if (guess_result.guess) {\n        return (\n            <div id=\"guess-result\" className=\"controls wrong\">\n                <p id=\"incorrect-guess\">{guess_result.guess}</p>\n                <h1>is incorrect</h1>\n                <p>It was {guess_result.correct_answer}</p>\n            </div>\n        );\n    } else {\n        return (\n            <div id=\"guess-result\" className=\"controls wrong\">\n                <h1>No guess</h1>\n                <p>It was {guess_result.correct_answer}</p>\n            </div>\n        );\n    }\n    \n}\n\nexport type GuessResult = {\n    guess?: string,\n    correct_answer: string,\n    is_correct: boolean,\n}\n\nexport default GuessResultUI;","import React from 'react';\n\nconst Score = ({score, max_score}: {score: number, max_score: number}) => <p id=\"score\" className=\"controls\">Correct: {score}/{max_score}</p>\n\nexport default Score;","import Fuse from \"fuse.js\";\n\nconst Matches = (guess: Guess) => {\n    const options = {\n        includeScore: true,\n        threshold: 0.1,\n        distance: 0,\n      };\n    const fuse = new Fuse([guess.answer], options);\n    const search = fuse.search(guess.guess);\n    return search.length > 0;\n}\n\nexport type Guess = {\n    answer: string,\n    guess: string,\n}\n\nexport default Matches;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { lightBlue, red } from '@material-ui/core/colors';\n\nconst dark_theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: lightBlue,\n    secondary: red\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={dark_theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}