{"version":3,"sources":["GameDatabase.ts","appSlice.ts","Timer.tsx","GuessInput.tsx","SakugaAPI.tsx","VideoPlayer.tsx","GuessResultUI.tsx","GuessMatcher.ts","VideoWrapper.ts","StartButton.tsx","App.tsx","historySlice.ts","Navigation.tsx","RoundSummary.tsx","RoundSummaries.tsx","PagedRoundSummaries.tsx","History.tsx","GameSummary.tsx","Progress.tsx","reportWebVitals.ts","app/store.ts","dark_theme.ts","RoundDetails.tsx","TagDetails.tsx","TagDetailsLoader.tsx","index.tsx"],"names":["database","database_name","rounds","version","stores","table","Dexie","initialState","videos","guesses","index","guess_to_show","undefined","playing","tags","appSlice","createSlice","name","reducers","mark_played","state","action","video_index","payload","tag_index","guess","playing_video","answers","played","set_videos","submit_guess","length","stop_showing_guess_results","start","change_guess","skip_tag","splice","actions","save_and_submit_guess","time_to_guess","dispatch","getState","app","tag","put","date","Date","now","filter","video","then","catch","console","log","Timer","duration","size","type","on_time_over","interval","className","count_down","show_emergency_color","adjusted_duration","useTimer","endTime","onTimeOver","time","reset","useEffect","normalize","value","progress_props","color","variant","LinearProgress","CircularProgress","useStyles","makeStyles","wrapper","position","fabProgress","top","left","match_sorter_options","keys","baseSort","tag_a","tag_b","item","count","filter_options","options","inputValue","matchSorter","slice","GuessInput","all_tags","useThunkDispatch","classes","useState","set_guess","id","onSubmit","event","preventDefault","Autocomplete","selectOnFocus","clearOnBlur","autoHighlight","autoComplete","disableClearable","clearOnEscape","style","width","filterOptions","getOptionLabel","onChange","_","renderInput","params","TextField","label","autoFocus","Fab","area-label","Send","a","fetch","API_URL","TagType","COPYRIGHT","response","json","map","map_tag","limit","url","split","join","jsonTag","increment","max","VideoPlayer","video_wrapper","should_play","loading","set_loading","set_index","mounted","fetch_random_videos","video_responses","wrap","play_next_video","new_index","Fragment","muted","onBuffer","onStart","onPlay","loop","onError","visibility","controls","height","onEnded","timer","root","display","flexDirection","justifyContent","alignItems","answer_ui","Typography","sortBy","GuessResultUI","closest_answer","result","is_exact","Paper","Container","component","correct","incorrect","missing","Matches","search_results","Fuse","includeScore","threshold","search","score","VideoWrapper","tags_by_name","video_response","tag_string","get","file_url","preview_url","this","Map","choose_random_tags","POPULARITY_LIST","min","sample","StartButton","Button","onClick","historySlice","page","num_rounds","set_rounds","set_num_rounds","set_active_tag","active_rounds","active_tag","load_num_rounds","load_rounds","page_size","orderBy","reverse","offset","toArray","zIndex","bottom","marginTop","Navigation","pathname","window","location","setValue","Box","BottomNavigation","newValue","showLabels","BottomNavigationAction","icon","SportsEsports","Link","to","Restore","tag_url","theme","title","textOverflow","overflow","whiteSpace","media","textDecoration","palette","text","primary","render_guess","guess_string","RoundSummary","round","last_video","title_tag","Card","CardActionArea","CardMedia","alt","image","CardContent","gutterBottom","RoundSummaries","Grid","container","spacing","xs","sm","md","pagination","margin","PagedRoundSummaries","useSelector","history","Pagination","Math","ceil","paddingBottom","History","useContainerStyles","GameSummary","container_classes","align","useProgressStepIconStyles","background","default","active","circle","borderRadius","border","backgroundColor","completed","secondary","main","fontSize","ProgressStepIcon","props","progressClass","clsx","progressStyles","padding","transform","ProgressConnector","withStyles","StepConnector","Progress","activeStep","steps","CorrectIcon","IncorrectIcon","Stepper","connector","is_correct","guess_matches","Step","StepLabel","StepIconComponent","useDispatch","App","match_result","set_all_tags","set_video_wrapper","fetch_all_tags","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","appReducer","historyReducer","createMuiTheme","lightBlue","red","tag_wrapper","flexWrap","padded_grid","marginBottom","get_guess","RoundDetails","toDateString","rarest_tag","tags_minus_main","src","poster","Chip","href","clickable","CardActions","IconButton","download","SaveAlt","TagDetails","TagDetailsLoader","useParams","tag_id","parseInt","where","equals","ReactDOM","render","StrictMode","ThemeProvider","dark_theme","CssBaseline","path","document","getElementById"],"mappings":"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","file":"static/js/main.5a654f90.chunk.js","sourcesContent":["import Dexie from 'dexie';\nimport { Tag } from './App';\nimport { Video } from './VideoWrapper';\n\nclass GameDatabase extends Dexie {\n    rounds: Dexie.Table<Round, number>;\n\n    constructor(database_name: string) {\n        super(database_name);\n        this.version(2).stores({\n            rounds: '++id,date,tag.id'\n        });\n        this.rounds = this.table('rounds');\n    }\n}\n\nexport interface Round {\n    id?: number,\n    date: number,\n    guess?: string,\n    videos: Video[],\n    time_to_guess: number,\n    tag: Tag,\n}\n\nconst database = new GameDatabase(\"aniguesser\");\n\nexport default database;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Tag } from './App';\nimport { Guess } from './GuessMatcher';\nimport { Video } from './VideoWrapper';\nimport { AppThunk } from './app/store';\nimport database from './GameDatabase';\n\ninterface AppState {\n  readonly videos: Video[][],\n  readonly guesses: Guess[],\n  readonly index: number,\n  readonly guess_to_show: number | undefined,\n  readonly playing: boolean,\n  readonly tags: Tag[],\n}\n\nconst initialState: AppState = {\n  videos: [],\n  guesses: [],\n  index: 0,\n  guess_to_show: undefined,\n  playing: false,\n  tags: [],\n};\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    mark_played: (state, action: PayloadAction<number>) => {\n      const video_index = action.payload;\n      const tag_index = state.index;\n      const guess = state.guesses[tag_index]?.guess;\n      const videos = state.videos[tag_index];\n      const playing_video = videos[video_index];\n\n      state.guesses[tag_index] = { guess, answers: playing_video.tags };\n      playing_video.played = true;\n    },\n    set_videos: (state, action: PayloadAction<Video[]>) => {\n      state.videos[state.index] = action.payload;\n    },\n    submit_guess: (state, action: PayloadAction<Guess>) => {\n      const index = state.index;\n\n      // show current guess\n      state.guess_to_show = index;\n      state.guesses[index] = action.payload;\n\n      // advance to next tag in the background,\n      // so we can preload the next video\n      if ((index + 1) < state.tags.length) {\n        state.index = index + 1;\n      } else {\n        state.playing = false;\n      }\n    },\n    stop_showing_guess_results: state => {\n      state.guess_to_show = undefined;\n    },\n    start: (state, action: PayloadAction<Tag[]>) => {\n      state.index = 0;\n      state.guess_to_show = undefined;\n      state.guesses = [];\n      state.videos = [];\n      state.playing = true;\n      state.tags = action.payload;\n    },\n    change_guess: (state, action: PayloadAction<string>) => {\n      const guess = action.payload;\n      const index = state.index;\n      const videos = state.videos[index];\n      if (videos) {\n        state.guesses[index] = {\n          guess,\n          answers: videos[videos.length - 1]?.tags ?? []\n        };\n      }\n    },\n    skip_tag: state => {\n      state.tags.splice(state.index, 1);\n      if ((state.index) >= state.tags.length) {\n        state.index = 0;\n        state.playing = false;\n      }\n    },\n  },\n});\n\nexport const {\n  mark_played,\n  stop_showing_guess_results,\n  start,\n  submit_guess,\n  change_guess,\n  skip_tag,\n  set_videos,\n} = appSlice.actions;\n\nexport const save_and_submit_guess = (time_to_guess: number): AppThunk => (dispatch, getState) => {\n  const state = getState().app;\n  const guesses = state.guesses;\n  const index = state.index;\n  const videos = state.videos[index];\n  const tag = state.tags[index];\n\n  // someone tried to submit a guess before\n  // the video loaded. just ignore it\n  if (videos === undefined || !videos[0]?.played) {\n    return;\n  }\n\n  // video timed out. submit an empty guess\n  let guess = guesses[index];\n  if (!guess) {\n    guess = {\n      answers: videos[videos.length - 1]?.tags ?? [],\n    };\n  }\n\n  database.rounds.put({\n    date: Date.now(),\n    guess: guess.guess,\n    videos: videos.filter(video => video.played),\n    time_to_guess,\n    tag,\n  })\n  .then(() => dispatch(submit_guess(guess)))\n  .catch(console.log);\n};\n\nexport default appSlice.reducer;\n","import { CircularProgress, CircularProgressProps, LinearProgress, LinearProgressProps } from \"@material-ui/core\"\nimport { useEffect } from \"react\";\nimport { useTimer } from \"use-timer\";\n\ntype Props = {\n    duration: number,\n    size?: number,\n    type?: \"linear\" | \"circular\",\n    on_time_over?: () => void,\n    className?: string,\n    interval?: number,\n    count_down?: boolean,\n    show_emergency_color?: boolean,\n}\n\nconst Timer = ({\n    duration,\n    size,\n    type,\n    on_time_over,\n    interval=50,\n    className,\n    count_down=false,\n    show_emergency_color=false,\n}: Props) => {\n    const adjusted_duration = duration * 1000 / interval;\n    const { time, start, reset } = useTimer({\n        endTime: adjusted_duration,\n        interval,\n        onTimeOver: on_time_over,\n    });\n\n    useEffect(() => {\n        start();\n        return reset;\n    }, [reset, start]);\n\n    const normalize = (value: number) => {\n        const adjusted_value = count_down ? adjusted_duration - value : value;\n        return adjusted_value * 100 / adjusted_duration;\n    }\n\n    const progress_props = {\n        color: normalize(time) < 25 && show_emergency_color ? \"secondary\" : \"primary\",\n        variant: \"determinate\",\n        value: normalize(time),\n        className,\n    };\n\n    return type === \"linear\" ?\n        <LinearProgress {...progress_props as LinearProgressProps} />:\n        <CircularProgress size={size} {...progress_props as CircularProgressProps} />\n}\n\nexport default Timer;","import { Fab, makeStyles, TextField } from '@material-ui/core';\nimport { Send } from '@material-ui/icons';\nimport { Autocomplete } from '@material-ui/lab';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport { Tag, useThunkDispatch } from './App';\nimport { matchSorter, MatchSorterOptions } from 'match-sorter';\nimport { change_guess, save_and_submit_guess } from './appSlice';\nimport Timer from './Timer';\n\nconst TAG_TIMER_DURATION = 30;\nconst useStyles = makeStyles({\n    wrapper: {\n      position: 'relative',\n    },\n    fabProgress: {\n      position: 'absolute',\n      top: -6,\n      left: -6,\n    },\n});\n\nconst GuessInput = ({ all_tags }: { all_tags: Tag[] }) => {\n  const dispatch = useThunkDispatch();\n  const classes = useStyles();\n  const [guess, set_guess] = useState<Tag | null>(null);\n\n  const on_guess_change = (_: ChangeEvent<{}>, value: Tag | null) => {\n    set_guess(value);\n    dispatch(change_guess(value?.name ?? \"\"));\n  }\n\n  const on_form_submitted = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (guess) {\n      dispatch(save_and_submit_guess(0));\n    }\n  }\n\n  return (\n    <form id=\"guess\" onSubmit={on_form_submitted}>\n      <div id=\"guess-input\">\n        <Autocomplete\n          selectOnFocus\n          clearOnBlur\n          autoHighlight\n          autoComplete\n          disableClearable\n          clearOnEscape\n          options={all_tags}\n          style={{ width: 300 }}\n          filterOptions={filter_options}\n          getOptionLabel={tag => tag.name}\n          onChange={on_guess_change}\n          renderInput={(params) => <TextField {...params} label=\"Guess the title\" variant=\"filled\" autoFocus />}\n        />\n      </div>\n      <div className={classes.wrapper}>\n        <Timer\n          size={68}\n          duration={TAG_TIMER_DURATION}\n          on_time_over={() => dispatch(save_and_submit_guess(TAG_TIMER_DURATION))}\n          count_down={true}\n          show_emergency_color={true}\n          className={classes.fabProgress}\n        />\n        <Fab type=\"submit\" area-label=\"submit\">\n          <Send />\n        </Fab>\n      </div>\n    </form>\n  );\n};\n\nconst match_sorter_options: MatchSorterOptions<Tag> = {\n  keys: [tag => tag.name],\n  baseSort: (tag_a, tag_b) => tag_b.item.count - tag_a.item.count,\n};\n\nconst filter_options = (options: Tag[], { inputValue }: { inputValue: string}) =>\n  inputValue ? matchSorter(options, inputValue, match_sorter_options).slice(0, 100) : [];\n  \nexport default GuessInput;","import { Tag, TagType } from \"./App\";\n\nconst API_URL = \"/api/\";\n\nexport type VideoResponse = {\n    file_url: string,\n    id: number,\n    tags: string,\n    preview_url: string,\n};\n\nexport async function fetch_all_tags() {\n    const response = await fetch(API_URL+'tag.json?limit=0&order=count&type='+TagType.COPYRIGHT);\n    const tags: Tag[] = (await response.json()).map(map_tag);\n    return tags.filter(({ count }) => count > 0);\n}\n\nexport async function fetch_random_videos(tag: Tag, limit = 8): Promise<VideoResponse[]> {\n    const url = API_URL+'post.json?tags=rating:safe order:random ext:mp4,webm ' + tag.name.split(\" \").join(\"_\") + \"&limit=\" + limit;\n    const response = await fetch(url);\n    return await response.json();\n}\n\nconst map_tag = (jsonTag: any): Tag => ({\n    count: jsonTag.count,\n    id: jsonTag.id,\n    name: jsonTag.name.split(\"_\").join(\" \"),\n});","import { CircularProgress } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport { Tag, useThunkDispatch } from \"./App\";\nimport { mark_played, set_videos, skip_tag } from \"./appSlice\";\nimport { fetch_random_videos } from \"./SakugaAPI\";\nimport VideoWrapper, { Video } from \"./VideoWrapper\";\n\ntype Props = {\n    tag: Tag,\n    videos: Video[],\n    video_wrapper: VideoWrapper,\n    should_play: boolean,\n};\n\nconst increment = (index: number, max: number) => (index + 1) % max;\n\nconst VideoPlayer = ({ tag, videos, video_wrapper, should_play }: Props) => {\n    const dispatch = useThunkDispatch();\n    const [loading, set_loading] = useState(true);\n    const [index, set_index] = useState(0);\n\n    useEffect(() => {\n        let mounted = true;\n        set_index(0);\n        fetch_random_videos(tag)\n            .then(video_responses => video_responses.map(video_wrapper.wrap))\n            .then(videos => {\n                if (mounted) {\n                    if (videos.length > 0) {\n                        set_index(0);\n                        dispatch(set_videos(videos));\n                    } else {\n                        dispatch(skip_tag());\n                    }\n                }\n            })\n        return () => { mounted = false }; \n    }, [tag, video_wrapper, dispatch]);\n\n    const play_next_video = () => {\n        if (videos.length > 1) {\n            const new_index = increment(index, videos.length);\n            set_index(new_index);\n        }\n    }\n\n    return (\n        <React.Fragment>\n        {(videos.length === 0 || loading) && should_play && <CircularProgress className=\"video-loading\" />}\n        <ReactPlayer\n            key={index}\n            muted\n            onBuffer={() => set_loading(true)}\n            onStart={() => {dispatch(mark_played(index)); set_loading(false);}}\n            onPlay={() => set_loading(false)}\n            playing={should_play}\n            loop={videos.length === 1}\n            onError={play_next_video}\n            url={videos[index]?.url}\n            style={should_play ? {visibility: \"visible\"} : {}}\n            className={should_play ? \"active\": \"\"}\n            id=\"main-video\"\n            controls={false}\n            width=\"100%\"\n            height=\"auto\"\n            onEnded={() => {play_next_video()}}\n        />\n\n        {\n            videos.length > 1 &&\n            <ReactPlayer\n                key={increment(index, videos.length)}\n                muted\n                id=\"preloading-video\"\n                url={videos[increment(index, videos.length)]?.url}\n            />\n        }\n        </React.Fragment>\n    );\n\n}\n\nexport default VideoPlayer;","import { Tag, useThunkDispatch } from './App';\nimport { sortBy } from 'lodash';\nimport Timer from './Timer';\nimport { stop_showing_guess_results } from './appSlice';\nimport { Container, makeStyles, Paper, Typography } from '@material-ui/core';\nimport { MatchResult } from './GuessMatcher';\nimport React from 'react';\n\nconst RESULT_DISPLAY_DURATION = 4;\n\nconst useStyles = makeStyles({\n    timer: {\n      width: \"100%\",\n    },\n    root: {\n        width:400,\n        height:200,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-evenly\",\n        alignItems: \"center\",\n    },\n});\n\nexport type GuessResult = \"correct\" | \"missing\" | \"incorrect\";\n\nexport interface GuessResultUIProps extends MatchResult {\n    readonly guess?: string,\n    readonly answers: Tag[],\n}\n\nconst GuessResultUI = ({guess, answers, closest_answer, result, is_exact}: GuessResultUIProps) => {\n    const dispatch = useThunkDispatch();\n    const classes = useStyles();\n\n    const timer = (\n        <Timer\n            duration={RESULT_DISPLAY_DURATION}\n            on_time_over={() => dispatch(stop_showing_guess_results())}\n            type = \"linear\"\n            className={classes.timer}\n        />\n    );\n    return (\n        <Paper>\n            <Container className={classes.root}>\n                {result !== \"missing\" && <Typography variant=\"body1\">{guess}</Typography>}\n                {result === \"correct\" && !is_exact && <Typography variant=\"body1\">({closest_answer})</Typography> }\n                <Typography variant=\"h3\" component=\"p\">{{\n                    correct: \"🎉 is correct 🎊\",\n                    incorrect: \"is incorrect\",\n                    missing: \"No guess\",\n                }[result]}</Typography>\n                {result !== \"correct\" && answer_ui(answers)}\n            </Container>\n            {timer}\n        </Paper>\n    )\n}\n\nconst answer_ui = (answers: Tag[]) => {\n    if (answers.length > 0) {\n        return <Typography variant=\"body1\">it was {sortBy(answers, tag => tag.count)[answers.length - 1].name}</Typography>\n    } else {\n        return null;\n    }\n}\n\nexport default GuessResultUI;","import Fuse from \"fuse.js\";\nimport { Tag } from \"./App\";\nimport { GuessResult } from \"./GuessResultUI\";\n\nexport type MatchResult = {\n    readonly result: GuessResult,\n    readonly is_exact: boolean,\n    readonly closest_answer?: string,\n}\n\nconst Matches = (guess: Guess): MatchResult => {\n    if (!guess.guess) {\n        return {\n            result: \"missing\",\n            is_exact: false,\n        };\n    }\n    const options = {\n        includeScore: true,\n        threshold: 0.1,\n    };\n    const fuse = new Fuse(guess.answers.map(tag => tag.name), options);\n    const search_results = fuse.search(guess.guess);\n    return {\n        result: search_results.length > 0 ? \"correct\" : \"incorrect\",\n        is_exact: search_results[0]?.score === 0,\n        closest_answer: search_results[0]?.item,\n    }\n}\n\nexport type Guess = {\n    readonly answers: Tag[],\n    readonly guess?: string,\n}\n\nexport default Matches;","import { Tag } from \"./App\";\nimport { VideoResponse } from \"./SakugaAPI\";\nimport { Map } from \"immutable\";\n\nclass VideoWrapper {\n    readonly tags_by_name: Map<string, Tag>;\n\n    constructor(all_tags: Tag[]) {\n        this.tags_by_name = Map(all_tags.map(tag => [tag.name, tag]));\n    }\n\n    readonly wrap = (video_response: VideoResponse): Video => {\n        const tags = video_response.tags\n            .split(\" \")\n            .map(tag_string => tag_string.split(\"_\").join(\" \"))\n            .map(tag_string => this.tags_by_name.get(tag_string))\n            .filter(tag => tag !== undefined) as Tag[];\n\n        return {\n            tags,\n            url: video_response.file_url,\n            id: video_response.id,\n            preview_url: video_response.preview_url,\n        }\n    }\n}\n\nexport type Video = {\n    readonly url: string,\n    readonly id: number,\n    readonly tags: Tag[],\n    readonly preview_url: string,\n    readonly played?: boolean,\n};\n\nexport default VideoWrapper;","import { Button, CircularProgress } from \"@material-ui/core\";\nimport React from \"react\";\nimport sample from 'lodash/sample';\nimport { useThunkDispatch, Tag } from \"./App\";\nimport { start } from './appSlice';\n\nconst StartButton = ({ all_tags }: { all_tags: Tag[] }) => {\n\n    const dispatch = useThunkDispatch();\n    const is_ready = all_tags.length > 0;\n\n    return is_ready ?\n        <Button\n            variant=\"contained\"\n            onClick={() => dispatch(start(choose_random_tags(all_tags)))}\n            id=\"start\">\n            Start\n        </Button> :\n        <CircularProgress />\n}\n\nexport function choose_random_tags(tags: Tag[]): Tag[] {\n    return POPULARITY_LIST.map(({ max, min }) =>\n        sample(tags.filter(({ count }) => max >= count && count >= min))\n    ) as Tag[];\n}\n\ntype Popularity = { \"max\": number, \"min\": number };\n\nexport const POPULARITY_LIST: Popularity[] = [\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 1, \"min\": 1 },\n];\n\nexport default StartButton;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.css';\nimport GuessInput from './GuessInput';\nimport VideoPlayer from './VideoPlayer';\nimport GuessResultUI from './GuessResultUI';\nimport guess_matches from './GuessMatcher';\nimport { fetch_all_tags } from './SakugaAPI';\nimport VideoWrapper from './VideoWrapper';\nimport { RootState, store } from './app/store';\nimport GameSummary from './GameSummary';\nimport Progress from './Progress';\nimport StartButton from './StartButton';\nimport Navigation from './Navigation';\n\nexport enum TagType {\n  GENERAL = 0,\n  ARTIST = 1,\n  COPYRIGHT = 3,\n  CHARACTER = 4,\n}\n\nexport type Tag = {\n  readonly count: number,\n  readonly id: number,\n  readonly name: string,\n};\n\nexport const useThunkDispatch = () => useDispatch<typeof store.dispatch>();\n\nfunction App() {\n  const {\n    guesses,\n    index,\n    videos,\n    guess_to_show,\n    playing,\n    tags,\n  } = useSelector((state: RootState) => state.app);\n\n  const match_result = useSelector((state: RootState) => {\n    const guess_to_show = state.app.guess_to_show;\n    return guess_to_show === undefined ?\n      undefined :\n      guess_matches(state.app.guesses[guess_to_show]!);\n  });\n\n  const [all_tags, set_all_tags] = useState<Tag[]>([]);\n  const [video_wrapper, set_video_wrapper] = useState<VideoWrapper | undefined>(undefined);\n\n  useEffect(() => {\n    fetch_all_tags().then(tags => {\n      set_all_tags(tags);\n      set_video_wrapper(new VideoWrapper(tags));\n    });\n  }, []);\n\n  if (!playing && guesses.length > 0 && guess_to_show === undefined) {\n    return (\n      <React.Fragment>\n        <GameSummary all_tags={all_tags} />\n        <Navigation />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div id=\"game\">\n      {\n        !playing &&\n        guesses.length === 0 &&\n        <React.Fragment>\n          <StartButton all_tags={all_tags} />\n          <Navigation />\n        </React.Fragment>\n      }\n      {\n        playing && tags.length > 0 && video_wrapper &&\n        <React.Fragment>\n          <VideoPlayer\n            tag={tags[index]}\n            videos={videos[index] ?? []}\n            video_wrapper={video_wrapper}\n            should_play={guess_to_show === undefined}\n          />\n\n          {guess_to_show === undefined && videos[index] && <GuessInput all_tags={all_tags} />}\n        </React.Fragment>\n      }\n      {\n        (playing || index > 0) && tags.length > 0 &&\n        <Progress activeStep={index} steps={tags.map(tag => tag.name)} guesses={guesses} />\n      }\n      {\n        guess_to_show !== undefined &&\n        match_result !== undefined &&\n        <GuessResultUI\n          {...match_result}\n          {...guesses[guess_to_show]}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import database from './GameDatabase';\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"./app/store\";\nimport { Round } from \"./GameDatabase\";\nimport { Tag } from './App';\n\ninterface HistoryState {\n    readonly rounds: Round[],\n    readonly page: number,\n    readonly num_rounds: number,\n    readonly active_tag?: Tag,\n    readonly active_rounds?: Round[],\n}\n\nconst initialState: HistoryState = {\n    rounds: [],\n    page: 0,\n    num_rounds: 0,\n}\n\nexport const historySlice = createSlice({\n    name: 'history',\n    initialState,\n    reducers: {\n        set_rounds: (state, action: PayloadAction<{page: number, rounds: Round[]}>) => {\n            state.rounds = action.payload.rounds;\n            state.page = action.payload.page;\n        },\n        set_num_rounds: (state, action: PayloadAction<number>) => {\n            state.num_rounds = action.payload;\n        },\n        set_active_tag: (state, action: PayloadAction<{rounds: Round[], tag: Tag}>) => {\n            state.active_rounds = action.payload.rounds;\n            state.active_tag = action.payload.tag;\n        },\n    }\n});\n\nexport const {\n    set_rounds,\n    set_num_rounds,\n    set_active_tag,\n} = historySlice.actions;\n\nexport const load_num_rounds = (): AppThunk => dispatch => {\n    database.rounds.count()\n        .then(count => dispatch(set_num_rounds(count)));\n}\n\ntype Page = { page: number, page_size: number };\n\nexport const load_rounds =\n    ({ page, page_size }: Page): AppThunk =>\n    dispatch => database.rounds\n        .orderBy(\"date\")\n        .reverse()\n        .offset(page * page_size)\n        .limit(page_size)\n        .toArray()\n        .then(rounds => dispatch(set_rounds({page, rounds})));\n\nexport const load_tag_details =\n    (tag_id: number): AppThunk =>\n    dispatch => database.rounds\n        .where(\"tag.id\")\n        .equals(tag_id)\n        .toArray()\n        .then(rounds => dispatch(set_active_tag({rounds, tag: rounds[0].tag})));\n\nexport default historySlice.reducer;","import { BottomNavigation, BottomNavigationAction, Box, makeStyles } from \"@material-ui/core\";\nimport { SportsEsports, Restore } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n    root: {\n        position: \"fixed\",\n        zIndex: 999,\n        bottom: 0,\n        width: \"100%\",\n        marginTop: -56,\n    }\n});\n\nconst Navigation = () => {\n    const pathname = window.location.pathname;\n    const [value, setValue] = useState(pathname);\n    const classes = useStyles();\n\n    return (\n        <Box className={classes.root}>\n            <BottomNavigation\n                value={value}\n                onChange={(_, newValue) => {\n                    setValue(newValue);\n                }}\n                showLabels\n            >\n                <BottomNavigationAction label=\"Play\" value=\"/\" icon={<SportsEsports />} component={Link} to=\"/\" />\n                <BottomNavigationAction label=\"History\" value=\"/history\" icon={<Restore />} component={Link} to=\"/history\" />\n            </BottomNavigation>\n        </Box>\n    );\n}\n\nexport default Navigation;","import { Card, CardActionArea, CardMedia, CardContent, Typography, makeStyles } from \"@material-ui/core\";\nimport { sortBy } from 'lodash';\nimport { Round } from \"./GameDatabase\";\nimport { Tag } from \"./App\";\nimport Matches from \"./GuessMatcher\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst TAG_URL = \"https://www.sakugabooru.com/post?tags=\";\nexport const tag_url = (tag: Tag) => TAG_URL + tag.name.split(\" \").join(\"_\");\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n    },\n    media: {\n        height: 240,\n    },\n    root: {\n        textDecoration: \"none\",\n        color: theme.palette.text.primary,\n    }\n}));\n\nexport type RoundSummaryProps = {\n    round: Round,\n};\n\nconst RoundSummary = ({ round }: RoundSummaryProps) => {\n    const classes = useStyles();\n    \n    const last_video = round.videos[round.videos.length - 1];\n    const tags = sortBy(last_video.tags, [\"count\"]);\n    const title_tag = tags[tags.length - 1];\n\n    return (\n        <Card>\n            <CardActionArea component=\"div\">\n                <Link to={\"/tag/\"+round.tag.id} className={classes.root}>\n                    <CardMedia\n                        component=\"img\"\n                        title={\"Image thumbnail of a clip from \" + round.videos[0].tags[0].name}\n                        alt={\"Image thumbnail of a clip from \" + round.videos[0].tags[0].name}\n                        image={round.videos[0].preview_url}\n                        className={classes.media}\n                    />\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\" className={classes.title}>\n                            {title_tag.name}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            {render_guess(round.guess, tags)}\n                        </Typography>\n                    </CardContent>\n                </Link>\n            </CardActionArea>\n        </Card>\n    );\n};\n\nconst render_guess = (guess: string | undefined, answers: Tag[]) => {\n    const match_result = Matches({ guess, answers });\n    const guess_string = \"\\\"\" + guess + \"\\\" \";\n    return {\n        missing: \"No guess\",\n        correct: guess_string + \"🎉 was correct 🎊\",\n        incorrect: guess_string + \"was incorrect\",\n    }[match_result.result]\n};\n\nexport default RoundSummary;","import { Grid } from \"@material-ui/core\";\nimport { Round } from \"./GameDatabase\";\nimport RoundSummary from \"./RoundSummary\";\n\nconst RoundSummaries = ({rounds}: {rounds: Round[]}) => (\n    <Grid container spacing={2}>\n        {rounds.map((round) => (\n            <Grid key={round.id} item className=\"round-summary\" xs={12} sm={6} md={4}>\n                <RoundSummary round={round} />\n            </Grid>\n        ))}\n    </Grid>\n);\n\nexport default RoundSummaries;","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useThunkDispatch } from \"./App\";\nimport { RootState } from \"./app/store\";\nimport { load_rounds, load_num_rounds } from \"./historySlice\";\nimport { Pagination } from \"@material-ui/lab\";\nimport { makeStyles } from \"@material-ui/core\";\nimport RoundSummaries from \"./RoundSummaries\";\n\nconst PAGE_SIZE = 12;\n\nconst useStyles = makeStyles({\n    pagination: {\n        margin: \"1em 0\",\n    },\n})\n\nconst PagedRoundSummaries = () => {\n    const dispatch = useThunkDispatch();\n    const { rounds, num_rounds, page } = useSelector((state: RootState) => state.history);\n    const classes = useStyles();\n\n    useEffect(() => dispatch(load_num_rounds()), [dispatch]);\n    useEffect(() => dispatch(load_rounds({ page: 0, page_size: PAGE_SIZE })), [dispatch]);\n\n    const on_page_change = (_: React.ChangeEvent<unknown>, page: number) => {\n        dispatch(load_rounds({ page: page - 1, page_size: PAGE_SIZE }));\n    }\n\n    return (\n        <React.Fragment>\n            <RoundSummaries rounds={rounds} />\n            <Pagination\n                className={classes.pagination}\n                page={page + 1}\n                count={Math.ceil(num_rounds / PAGE_SIZE)}\n                onChange={on_page_change}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default PagedRoundSummaries;","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useThunkDispatch } from \"./App\";\nimport { RootState } from \"./app/store\";\nimport { load_num_rounds } from \"./historySlice\";\nimport { Container, makeStyles } from \"@material-ui/core\";\nimport Navigation from \"./Navigation\";\nimport PagedRoundSummaries from \"./PagedRoundSummaries\";\n\n\nconst useStyles = makeStyles({\n    container: {\n        paddingBottom: 56,\n    }\n})\n\nconst History = () => {\n    const dispatch = useThunkDispatch();\n    useEffect(() => dispatch(load_num_rounds()), [dispatch]);\n    const { num_rounds } = useSelector((state: RootState) => state.history);\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <Container className={classes.container}>\n                {num_rounds > 0 ? <PagedRoundSummaries /> : <h1>No game history</h1>}\n            </Container>\n            <Navigation />\n        </React.Fragment>\n    )\n};\n\nexport default History;","import { Button, Container, makeStyles, Typography } from \"@material-ui/core\";\nimport { Tag, useThunkDispatch } from \"./App\";\nimport { start } from \"./appSlice\";\nimport { choose_random_tags } from './StartButton';\nimport History from './History';\nimport React from \"react\";\n\nexport type GameSummaryProps = {\n    all_tags: Tag[],\n};\n\nconst useContainerStyles = makeStyles({\n    root: {\n        paddingBottom:56,\n    }\n});\n\nconst GameSummary = ({all_tags}: GameSummaryProps) => {\n    const dispatch = useThunkDispatch();\n    const container_classes = useContainerStyles();\n\n    return (\n        <Container classes={container_classes}>\n            <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\">Game Summary</Typography>\n            <div id=\"play-again\">\n                <Button\n                    variant=\"contained\"\n                    onClick={() => dispatch(start(choose_random_tags(all_tags)))}\n                    color=\"primary\"\n                >\n                    Play Again\n                </Button>\n            </div>\n            <History />\n        </Container>\n    )\n}\n\nexport default GameSummary;","import { makeStyles, Step, StepConnector, StepIconProps, StepLabel, Stepper, withStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport guess_matches, { Guess } from \"./GuessMatcher\";\n\n\nconst useProgressStepIconStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        height: 22,\n        alignItems: 'center',\n        color: theme.palette.background.default,\n    },\n    active: {\n        color: theme.palette.text.primary,\n    },\n    circle: {\n        width: 6,\n        height: 6,\n        borderRadius: '50%',\n        border: \"1px solid #aaa\",\n        backgroundColor: 'currentColor',\n    },\n    completed: {\n        color: theme.palette.secondary.main,\n        zIndex: 1,\n        fontSize: 18,\n        border: \"none\",\n    },\n    correct: {\n        color: theme.palette.primary.main,\n    }\n}));\n\nconst ProgressStepIcon = (correct: boolean) => {\n    const classes = useProgressStepIconStyles();\n    return  (props: StepIconProps) => {\n        const { active, completed } = props;\n    \n        let progressClass = classes.circle;\n\n        if (completed) {\n            progressClass += \" \" + classes.completed;\n            if (correct) {\n                progressClass += \" \" + classes.correct;\n            }\n        }\n    \n        return (\n            <div\n                className={clsx(classes.root, {\n                    [classes.active]: active,\n                })}\n            >\n                <div className={progressClass} />\n            </div>\n        );\n    };\n}\n\nconst progressStyles = makeStyles({\n    root: {\n        background: \"rgba(2, 2, 2, .5)\",\n        zIndex: 100000,\n        height: 22,\n        padding: 8,\n        margin: 5,\n        borderRadius: \"10px\",\n        position: \"fixed\",\n        bottom: 10,\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n    }\n})\n\n\nconst ProgressConnector = withStyles({\n    root: {\n        display: \"none\",\n    }\n})(StepConnector);\n\nconst Progress = ({ activeStep, steps, guesses }: { activeStep: number, steps: string[], guesses: Guess[] }) => {\n    const classes = progressStyles();\n    const CorrectIcon = ProgressStepIcon(true);\n    const IncorrectIcon = ProgressStepIcon(false);\n    return (\n        <Stepper activeStep={activeStep} className={classes.root} connector={<ProgressConnector />}>\n            {steps.map((label, index) => {\n                const is_correct = guesses[index] && guess_matches(guesses[index]).result === \"correct\";\n                return (\n                    <Step key={index}>\n                        <StepLabel StepIconComponent={is_correct ? CorrectIcon : IncorrectIcon}></StepLabel>\n                    </Step>\n                );\n            })}\n        </Stepper>\n    );\n}\n\nexport default Progress;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport appReducer from '../appSlice';\nimport historyReducer from '../historySlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    history: historyReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { lightBlue, red } from '@material-ui/core/colors';\n\nexport default createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: lightBlue,\n        secondary: red\n    },\n});","import { Box, Card, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, makeStyles, Typography } from \"@material-ui/core\";\nimport { Link, SaveAlt } from \"@material-ui/icons\";\nimport { sortBy } from \"lodash\";\nimport React from \"react\";\nimport { Round } from \"./GameDatabase\";\nimport { tag_url } from \"./RoundSummary\";\nimport { Video } from \"./VideoWrapper\";\n\nconst VIDEO_URL = \"https://www.sakugabooru.com/post/show/\";\n\nexport type RoundDetailsProps = {\n    readonly round: Round,\n}\n\nconst useStyles = makeStyles(theme => ({\n    tag_wrapper: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.5),\n        },\n    },\n    padded_grid: {\n        marginBottom: theme.spacing(1),\n    }\n}));\n\nconst RoundDetails = ({ round }: RoundDetailsProps) => {\n\n    const classes = useStyles();\n\n    const video_ui = (video: Video) => {\n        const tags = sortBy(video.tags, tag => tag.count);\n        const rarest_tag = tags[0];\n        const tags_minus_main = tags.filter(tag => tag.id !== round.tag.id);\n        return (\n            <Grid item key={video.id} xs={12} sm={6} md={4}>\n                <Card>\n                    <CardMedia\n                        component=\"video\"\n                        title={\"Video clip from \" + rarest_tag.name}\n                        src={video.url}\n                        controls\n                        loop\n                        poster={video.preview_url}\n                    />\n                    {\n                        tags_minus_main.length > 0 &&\n                        <CardContent>\n                            <Box className={classes.tag_wrapper}>\n                                {tags_minus_main.map(tag =>\n                                    <Chip label={tag.name} component=\"a\" href={tag_url(tag)} clickable />\n                                )}\n                            </Box>\n                        </CardContent>\n                    }\n                    <CardActions>\n                        <IconButton href={VIDEO_URL + video.id}>\n                            <Link />\n                        </IconButton>\n                        <IconButton href={video.url} download={rarest_tag.name}>\n                            <SaveAlt />\n                        </IconButton>\n                    </CardActions>\n                </Card>\n            </Grid>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>{new Date(round.date).toDateString()}</Typography>\n            <Typography gutterBottom>{get_guess(round.guess)}</Typography>\n            <Grid container spacing={2} className={classes.padded_grid}>\n                {round.videos.map(video_ui)}\n            </Grid>\n        </React.Fragment>\n    )\n};\n\nconst get_guess = (guess?: string) => guess ? \"Your guess: \" + guess : \"No guess\";\n\nexport default RoundDetails;","import { Container, IconButton, Typography } from \"@material-ui/core\";\nimport { Link } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { Tag } from \"./App\";\nimport { Round } from \"./GameDatabase\";\nimport RoundDetails from \"./RoundDetails\";\nimport { tag_url } from \"./RoundSummary\";\n\nconst TagDetails = ({tag, rounds}: {tag: Tag, rounds: Round[]}) => {\n    return (\n        <Container>\n            <Typography variant=\"h3\" component=\"h1\">\n                {tag.name}\n                <IconButton href={tag_url(tag)}>\n                    <Link />\n                </IconButton>\n            </Typography>\n            {rounds.map(round => <RoundDetails round={round} />)}\n        </Container>\n    );\n};\n\nexport default TagDetails;","import { Container, Typography } from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { useThunkDispatch } from \"./App\";\nimport { RootState } from \"./app/store\";\nimport { load_tag_details } from \"./historySlice\";\nimport TagDetails from \"./TagDetails\";\n\nconst TagDetailsLoader = () => {\n    const { id } = useParams<{id: string}>();\n\n    const dispatch = useThunkDispatch();\n    useEffect(() => dispatch(load_tag_details(parseInt(id))), [dispatch, id]);\n    const { active_tag, active_rounds } = useSelector((state: RootState) => state.history);\n\n    if (active_tag === undefined || active_rounds === undefined) {\n        return (\n            <Container>\n                <Typography variant=\"h3\" component=\"h1\">\n                    No such tag\n                </Typography>\n            </Container>\n        )\n    }\n\n    return <TagDetails tag={active_tag} rounds={active_rounds} />\n};\nexport default TagDetailsLoader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { CssBaseline } from '@material-ui/core';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport History from './History';\nimport dark_theme from './dark_theme';\nimport TagDetailsLoader from './TagDetailsLoader';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={dark_theme}>\n      <CssBaseline />\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route path=\"/tag/:id\">\n              <TagDetailsLoader />\n            </Route>\n            <Route path=\"/history\">\n              <History />\n            </Route>\n            <Route path=\"/\">\n              <App />\n            </Route>\n          </Switch>\n        </Router>\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}