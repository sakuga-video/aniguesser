{"version":3,"sources":["appSlice.ts","Timer.tsx","GuessInput.tsx","SakugaAPI.tsx","VideoPlayer.tsx","App.tsx","GuessResultUI.tsx","Score.tsx","GuessMatcher.ts","VideoWrapper.ts","GameSummary.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["initialState","videos","guesses","index","guess_to_show","undefined","playing","tags","appSlice","createSlice","name","reducers","change_video","state","action","new_video","payload","guess","answers","push","submit_guess","length","show_next_tag","POPULARITY_LIST","start","change_guess","actions","Timer","duration","size","type","on_time_over","interval","className","count_down","show_emergency_color","adjusted_duration","useTimer","endTime","onTimeOver","time","reset","useEffect","normalize","value","progress_props","color","variant","LinearProgress","CircularProgress","useStyles","makeStyles","wrapper","position","fabProgress","top","left","match_sorter_options","keys","tag","baseSort","tag_a","tag_b","item","count","filter_options","options","inputValue","matchSorter","slice","GuessInput","all_tags","dispatch","useThunkDispatch","classes","useState","set_guess","id","onSubmit","event","preventDefault","Autocomplete","selectOnFocus","clearOnBlur","autoHighlight","autoComplete","disableClearable","clearOnEscape","style","width","filterOptions","getOptionLabel","onChange","_","renderInput","params","TextField","label","autoFocus","Fab","area-label","Send","a","fetch","API_URL","TagType","COPYRIGHT","response","json","map","map_tag","filter","fetch_video","page","random","url","replaceAll","videoIsValid","data","increment","jsonTag","video","file_url","file_ext","VideoPlayer","video_wrapper","set_page","mounted","then","video_page","wrap","set_video","muted","preload","autoPlay","src","onEnded","next_page","timer","root","flexBasis","answer_ui","sortBy","GuessResultUI","closest_answer","result","is_exact","Paper","correct","incorrect","missing","Score","score","max_score","Matches","search_results","Fuse","includeScore","threshold","search","VideoWrapper","tags_by_name","this","Map","video_response","split","tag_string","get","preview_url","render_guess","match_result","guess_string","minHeight","GameSummary","rounds","Container","Grid","container","spacing","round","xs","sm","md","Card","CardActionArea","href","SAKUGABOORU_URL","target","CardMedia","component","title","alt","image","CardContent","Typography","gutterBottom","Button","onClick","choose_random_tags","max","min","sample","score_to_show","total","i","guess_matches","useDispatch","App","useSelector","app","number_of_rounds","set_all_tags","set_video_wrapper","fetch_all_tags","disabled","Fragment","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","appReducer","dark_theme","createMuiTheme","palette","primary","lightBlue","secondary","red","ReactDOM","render","StrictMode","ThemeProvider","theme","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.535227e8.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { POPULARITY_LIST, Tag } from './App';\nimport { Guess } from './GuessMatcher';\nimport { Video } from './VideoWrapper';\n\ninterface AppState {\n  readonly videos: Video[][],\n  readonly guesses: Guess[],\n  readonly index: number,\n  readonly guess_to_show: number | undefined,\n  readonly playing: boolean,\n  readonly tags: Tag[],\n}\n\nconst initialState: AppState = {\n  videos: [],\n  guesses: [],\n  index: 0,\n  guess_to_show: undefined,\n  playing: false,\n  tags: [],\n};\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    change_video: (state, action: PayloadAction<Video>) => {\n      const new_video = action.payload;\n      const index = state.index;\n      const guess = state.guesses[index]?.guess;\n      state.guesses[index] = { guess, answers: new_video.tags };\n      state.videos[index] ?\n        state.videos[index].push(new_video) :\n        state.videos[index] = [new_video];\n    },\n    submit_guess: state => {\n      const guesses = state.guesses;\n      const index = state.index;\n      const videos = state.videos[index];\n\n      // someone tried to submit a guess before\n      // the video loaded. just ignore it\n      if (videos === undefined) {\n        return;\n      }\n    \n      state.guess_to_show = index;\n    \n      if (!guesses[index]) {\n        guesses[index] = {\n          answers: videos[videos.length - 1]?.tags ?? [],\n        };\n      }\n    },\n    show_next_tag: state => {\n      const index = state.index;\n      if ((index + 1) < POPULARITY_LIST.length) {\n        state.index = index + 1;\n      } else {\n        state.index = 0;\n        state.playing = false;\n      }\n      state.guess_to_show = undefined;\n    },\n    start: (state, action: PayloadAction<Tag[]>) => {\n      state.index = 0;\n      state.guesses = [];\n      state.playing = true;\n      state.tags = action.payload;\n    },\n    change_guess: (state, action: PayloadAction<string>) => {\n      const guess = action.payload;\n      const index = state.index;\n      const videos = state.videos[index];\n      if (videos) {\n        state.guesses[index] = {\n          guess,\n          answers: videos[videos.length - 1]?.tags ?? []\n        };\n      }\n    },\n  },\n});\n\nexport const {\n  change_video,\n  show_next_tag,\n  start,\n  submit_guess,\n  change_guess\n} = appSlice.actions;\n\nexport default appSlice.reducer;\n","import { CircularProgress, CircularProgressProps, LinearProgress, LinearProgressProps } from \"@material-ui/core\"\nimport { useEffect } from \"react\";\nimport { useTimer } from \"use-timer\";\n\ntype Props = {\n    duration: number,\n    size?: number,\n    type?: \"linear\" | \"circular\",\n    on_time_over?: () => void,\n    className?: string,\n    interval?: number,\n    count_down?: boolean,\n    show_emergency_color?: boolean,\n}\n\nconst Timer = ({\n    duration,\n    size,\n    type,\n    on_time_over,\n    interval=50,\n    className,\n    count_down=false,\n    show_emergency_color=false,\n}: Props) => {\n    const adjusted_duration = duration * 1000 / interval;\n    const { time, start, reset } = useTimer({\n        endTime: adjusted_duration,\n        interval,\n        onTimeOver: on_time_over,\n    });\n\n    useEffect(() => {\n        start();\n        return reset;\n    }, [reset, start]);\n\n    const normalize = (value: number) => {\n        const adjusted_value = count_down ? adjusted_duration - value : value;\n        return adjusted_value * 100 / adjusted_duration;\n    }\n\n    const progress_props = {\n        color: normalize(time) < 25 && show_emergency_color ? \"secondary\" : \"primary\",\n        variant: \"determinate\",\n        value: normalize(time),\n        className,\n    };\n\n    return type === \"linear\" ?\n        <LinearProgress {...progress_props as LinearProgressProps} />:\n        <CircularProgress size={size} {...progress_props as CircularProgressProps} />\n}\n\nexport default Timer;","import { Fab, makeStyles, TextField } from '@material-ui/core';\nimport { Send } from '@material-ui/icons';\nimport { Autocomplete } from '@material-ui/lab';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport { Tag, useThunkDispatch } from './App';\nimport { matchSorter, MatchSorterOptions } from 'match-sorter';\nimport { change_guess, submit_guess } from './appSlice';\nimport Timer from './Timer';\n\nconst TAG_TIMER_DURATION = 30;\nconst useStyles = makeStyles({\n    wrapper: {\n      position: 'relative',\n    },\n    fabProgress: {\n      position: 'absolute',\n      top: -6,\n      left: -6,\n    },\n});\n\nconst GuessInput = ({ all_tags }: { all_tags: Tag[] }) => {\n  const dispatch = useThunkDispatch();\n  const classes = useStyles();\n  const [guess, set_guess] = useState<Tag | null>(null);\n\n  const on_guess_change = (_: ChangeEvent<{}>, value: Tag | null) => {\n    set_guess(value);\n    dispatch(change_guess(value?.name ?? \"\"));\n  }\n\n  const on_form_submitted = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (guess) {\n      dispatch(submit_guess());\n    }\n  }\n\n  return (\n    <form id=\"guess\" onSubmit={on_form_submitted}>\n      <div id=\"guess-input\">\n        <Autocomplete\n          selectOnFocus\n          clearOnBlur\n          autoHighlight\n          autoComplete\n          disableClearable\n          clearOnEscape\n          options={all_tags}\n          style={{ width: 300 }}\n          filterOptions={filter_options}\n          getOptionLabel={tag => tag.name}\n          onChange={on_guess_change}\n          renderInput={(params) => <TextField {...params} label=\"Guess the title\" variant=\"filled\" autoFocus />}\n        />\n      </div>\n      <div className={classes.wrapper}>\n        <Timer\n          size={68}\n          duration={TAG_TIMER_DURATION}\n          on_time_over={() => dispatch(submit_guess())}\n          count_down={true}\n          show_emergency_color={true}\n          className={classes.fabProgress}\n        />\n        <Fab type=\"submit\" area-label=\"submit\">\n          <Send />\n        </Fab>\n      </div>\n    </form>\n  );\n};\n\nconst match_sorter_options: MatchSorterOptions<Tag> = {\n  keys: [tag => tag.name],\n  baseSort: (tag_a, tag_b) => tag_b.item.count - tag_a.item.count,\n};\n\nconst filter_options = (options: Tag[], { inputValue }: { inputValue: string}) =>\n  inputValue ? matchSorter(options, inputValue, match_sorter_options).slice(0, 100) : [];\n  \nexport default GuessInput;","import { Tag, TagType } from \"./App\";\nimport { random } from \"lodash\";\n\nconst API_URL = \"/api/\";\n\nexport type VideoResponse = {\n    file_url: string,\n    id: number,\n    tags: string,\n    preview_url: string,\n};\n\nexport type Page<Data> = {\n    data: Data,\n    page: number,\n}\n\nexport async function fetch_all_tags() {\n    const response = await fetch(API_URL+'tag.json?limit=0&order=count&type='+TagType.COPYRIGHT);\n    const tags: Tag[] = (await response.json()).map(map_tag);\n    return tags.filter(({ count }) => count > 0);\n}\n\nexport async function fetch_video({ tag, page = undefined }: { tag: Tag, page?: number }): Promise<Page<VideoResponse>> {\n    page = page ?? random(tag.count);\n    const url = API_URL+'post.json?limit=1&page=' + page + '&tags=' + tag.name.replaceAll(\" \", \"_\") + \" rating:safe\";\n    const response = await fetch(url);\n    const videos: VideoResponse[] = await response.json();\n\n    if (videoIsValid(videos[0])) {\n        return {\n            data: videos[0],\n            page,\n        };\n    } else {\n        return fetch_video({\n            tag,\n            page: increment(page, tag)\n        });\n    }\n}\n\nconst map_tag = (jsonTag: any): Tag => ({\n    count: jsonTag.count,\n    id: jsonTag.id,\n    name: jsonTag.name.replaceAll(\"_\", \" \"),\n});\n\nexport const increment = (page: number, tag: Tag) => (page + 1) % tag.count;\n\nfunction videoIsValid(video: any) {\n    return video\n        && video.file_url\n        && (video.file_ext === \"mp4\" || video.file_ext === \"webm\")\n        && video.id;\n}","import { useEffect, useState } from \"react\";\nimport { Tag, useThunkDispatch } from \"./App\";\nimport { change_video } from \"./appSlice\";\nimport { fetch_video, increment, Page, VideoResponse } from \"./SakugaAPI\";\nimport VideoWrapper, { Video } from \"./VideoWrapper\";\n\ntype Props = {\n    tag: Tag,\n    video: Video | undefined,\n    video_wrapper: VideoWrapper,\n};\n\nconst VideoPlayer = ({ tag, video, video_wrapper }: Props) => {\n    const [page, set_page] = useState<number | undefined>(undefined);\n    const dispatch = useThunkDispatch();\n\n    useEffect(() => {\n        let mounted = true;\n        fetch_video({ tag }).then(video_page => {\n            if (mounted) {\n                const video = video_wrapper.wrap(video_page.data);\n                dispatch(change_video(video));\n                set_page(video_page.page);\n            }\n        });\n        return () => { mounted = false };\n    }, [tag, video_wrapper, dispatch]);\n\n    const play_next_video = () => {\n        const next_page = increment(page!, tag);\n        fetch_video({ tag, page: next_page }).then(set_video);\n    }\n\n    const set_video = (video_page: Page<VideoResponse>) => {\n        const video = video_wrapper.wrap(video_page.data);\n        dispatch(change_video(video));\n        set_page(video_page.page);\n    }\n\n    return (\n        <video\n            muted\n            preload=\"auto\"\n            autoPlay\n            src={video?.url}\n            onEnded={play_next_video}\n        />\n    )\n}\n\nexport default VideoPlayer;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport sample from 'lodash/sample';\nimport './App.css';\nimport GuessInput from './GuessInput';\nimport VideoPlayer from './VideoPlayer';\nimport Button from '@material-ui/core/Button';\nimport GuessResultUI from './GuessResultUI';\nimport Score from './Score';\nimport guess_matches, { Guess } from './GuessMatcher';\nimport { fetch_all_tags } from './SakugaAPI';\nimport VideoWrapper from './VideoWrapper';\nimport { RootState, store } from './app/store';\nimport { start } from './appSlice';\nimport Timer from './Timer';\nimport GameSummary, { Round } from './GameSummary';\n\nexport enum TagType {\n  GENERAL = 0,\n  ARTIST = 1,\n  COPYRIGHT = 3,\n  CHARACTER = 4,\n}\n\nexport type Tag = {\n  readonly count: number,\n  readonly id: number,\n  readonly name: string,\n};\n\ntype Popularity = { \"max\": number, \"min\": number };\n\nconst LOADING_DURATION = 0.8;\nexport const POPULARITY_LIST: Popularity[] = [\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 100000, \"min\": 500 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 500, \"min\": 100 },\n  { \"max\": 100, \"min\": 25 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 25, \"min\": 1 },\n  { \"max\": 1, \"min\": 1 },\n];\n\nexport function choose_random_tags(tags: Tag[]): Tag[] {\n  return POPULARITY_LIST.map(({ max, min }) =>\n    sample(tags.filter(({ count }) => max >= count && count >= min))\n  ) as Tag[];\n}\n\nfunction score_to_show(index: number, guess_to_show: number | undefined) {\n  return guess_to_show !== undefined ?\n    index + 1 :\n    index;\n}\n\nfunction score(guesses: Guess[], index: number) {\n  let total = 0;\n\n  for (let i = 0; i < index; i++) {\n    if (guess_matches(guesses[i]).result === \"correct\") {\n      total += 1;\n    }\n  }\n\n  return total;\n}\n\nexport const useThunkDispatch = () => useDispatch<typeof store.dispatch>();\n\nfunction App() {\n  const {\n    guesses,\n    index,\n    videos,\n    guess_to_show,\n    playing,\n    tags,\n  } = useSelector((state: RootState) => state.app);\n  const rounds: Round[] = useSelector((state: RootState) => {\n    const app = state.app;\n    const number_of_rounds = app.tags.length;\n    const rounds = [];\n    for (let i = 0; i < number_of_rounds; i++) {\n      rounds.push({\n        tag: app.tags[i],\n        videos: app.videos[i],\n        guess: app.guesses[i],\n      });\n    }\n    return rounds;\n  });\n  const match_result = useSelector((state: RootState) => {\n    const guess_to_show = state.app.guess_to_show;\n    return guess_to_show === undefined ?\n      undefined :\n      guess_matches(state.app.guesses[guess_to_show]!);\n  });\n  const dispatch = useThunkDispatch();\n\n  const [all_tags, set_all_tags] = useState<Tag[]>([]);\n  const [video_wrapper, set_video_wrapper] = useState<VideoWrapper | undefined>(undefined);\n\n  useEffect(() => {\n    fetch_all_tags().then(tags => {\n      set_all_tags(tags);\n      set_video_wrapper(new VideoWrapper(tags));\n    });\n  }, []);\n\n  if (!playing && guesses.length > 0) {\n    return <GameSummary rounds={rounds} all_tags={all_tags} />;\n  }\n\n  return (\n    <div id=\"game\">\n      {\n        playing &&\n          <Score\n            score={score(guesses, score_to_show(index, guess_to_show))}\n            max_score={score_to_show(index, guess_to_show)} />\n      }\n      {\n        all_tags.length === 0 &&\n        <Timer duration={LOADING_DURATION} />\n      }\n      {\n        !playing &&\n        guesses.length === 0 &&\n        all_tags.length > 0 &&\n        <Button\n          variant=\"contained\"\n          disabled={all_tags.length === 0}\n          onClick={() => dispatch(start(choose_random_tags(all_tags)))}\n          id=\"start\">\n            Start\n        </Button>\n      }\n      {\n        playing && tags.length > 0 && guess_to_show === undefined && video_wrapper &&\n        <React.Fragment>\n          <VideoPlayer\n            tag={tags[index]}\n            video={videos[index] ? videos[index][videos[index].length - 1] : undefined}\n            video_wrapper={video_wrapper}\n          />\n\n          {videos[index] && <GuessInput all_tags={all_tags} />}\n        </React.Fragment>\n      }\n      {\n        guess_to_show !== undefined &&\n        match_result !== undefined &&\n        <GuessResultUI\n          {...match_result}\n          {...guesses[guess_to_show]}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { Tag, useThunkDispatch } from './App';\nimport { sortBy } from 'lodash';\nimport Timer from './Timer';\nimport { show_next_tag } from './appSlice';\nimport { makeStyles, Paper } from '@material-ui/core';\nimport { MatchResult } from './GuessMatcher';\n\nconst RESULT_DISPLAY_DURATION = 4;\n\nconst useStyles = makeStyles({\n    timer: {\n      width: \"100%\",\n    },\n    root: {\n        flexBasis: \"400px\",\n    },\n});\n\nexport type GuessResult = \"correct\" | \"missing\" | \"incorrect\";\n\nexport interface GuessResultUIProps extends MatchResult {\n    readonly guess?: string,\n    readonly answers: Tag[],\n}\n\nconst GuessResultUI = ({guess, answers, closest_answer, result, is_exact}: GuessResultUIProps) => {\n    const dispatch = useThunkDispatch();\n    const classes = useStyles();\n\n    const timer = (\n        <Timer\n            duration={RESULT_DISPLAY_DURATION}\n            on_time_over={() => dispatch(show_next_tag())}\n            type = \"linear\"\n            className={classes.timer}\n        />\n    );\n    return (\n        <Paper id=\"guess-result\" className={classes.root}>\n            {result !== \"missing\" && <p>{guess}</p>}\n            {result === \"correct\" && !is_exact && <p>({closest_answer})</p> }\n            <h1>{{\n                correct: \"🎉 is correct 🎊\",\n                incorrect: \"is incorrect\",\n                missing: \"No guess\",\n            }[result]}</h1>\n            {result !== \"correct\" && answer_ui(answers)}\n            {timer}\n        </Paper>\n    )\n}\n\nconst answer_ui = (answers: Tag[]) => {\n    if (answers.length > 0) {\n        return <p>it was {sortBy(answers, tag => tag.count)[answers.length - 1].name}</p>\n    } else {\n        return null;\n    }\n}\n\nexport default GuessResultUI;","const Score = ({score, max_score}: {score: number, max_score: number}) =>\n    <p id=\"score\" className=\"controls\">Correct: {score}/{max_score}</p>\n\nexport default Score;","import Fuse from \"fuse.js\";\nimport { Tag } from \"./App\";\nimport { GuessResult } from \"./GuessResultUI\";\n\nexport type MatchResult = {\n    readonly result: GuessResult,\n    readonly is_exact: boolean,\n    readonly closest_answer?: string,\n}\n\nconst Matches = (guess: Guess): MatchResult => {\n    if (!guess.guess) {\n        return {\n            result: \"missing\",\n            is_exact: false,\n        };\n    }\n    const options = {\n        includeScore: true,\n        threshold: 0.1,\n    };\n    const fuse = new Fuse(guess.answers.map(tag => tag.name), options);\n    const search_results = fuse.search(guess.guess);\n    return {\n        result: search_results.length > 0 ? \"correct\" : \"incorrect\",\n        is_exact: search_results[0]?.score === 0,\n        closest_answer: search_results[0]?.item,\n    }\n}\n\nexport type Guess = {\n    readonly answers: Tag[],\n    readonly guess?: string,\n}\n\nexport default Matches;","import { Tag } from \"./App\";\nimport { VideoResponse } from \"./SakugaAPI\";\nimport { Map } from \"immutable\";\n\nclass VideoWrapper {\n    readonly tags_by_name: Map<string, Tag>;\n\n    constructor(all_tags: Tag[]) {\n        this.tags_by_name = Map(all_tags.map(tag => [tag.name, tag]));\n    }\n\n    wrap(video_response: VideoResponse): Video {\n        const tags = video_response.tags\n            .split(\" \")\n            .map(tag_string => tag_string.replaceAll(\"_\", \" \"))\n            .map(tag_string => this.tags_by_name.get(tag_string))\n            .filter(tag => tag !== undefined) as Tag[];\n\n        return {\n            tags,\n            url: video_response.file_url,\n            id: video_response.id,\n            preview_url: video_response.preview_url,\n        }\n    }\n}\n\nexport type Video = {\n    readonly url: string,\n    readonly id: number,\n    readonly tags: Tag[],\n    readonly preview_url: string,\n};\n\nexport default VideoWrapper;","import { Button, Card, CardActionArea, CardContent, CardMedia, Container, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport { choose_random_tags, Tag, useThunkDispatch } from \"./App\";\nimport { start } from \"./appSlice\";\nimport Matches, { Guess } from \"./GuessMatcher\";\nimport { Video } from \"./VideoWrapper\";\n\nexport type GameSummaryProps = {\n    rounds: Round[],\n    all_tags: Tag[],\n};\n\nexport type Round = {\n    tag: Tag,\n    videos: Video[],\n    guess: Guess,\n}\n\nconst SAKUGABOORU_URL = \"https://www.sakugabooru.com/post\";\nconst SAKUGABOORU_TAG_URL = SAKUGABOORU_URL + \"?tags=\";\n\nconst render_guess = (guess: Guess) => {\n    const match_result = Matches(guess);\n    const guess_string = \"\\\"\" + guess.guess + \"\\\" \";\n    return {\n        missing: \"No guess\",\n        correct: guess_string + \"🎉 was correct 🎊\",\n        incorrect: guess_string + \"was incorrect\",\n    }[match_result.result]\n}\n\nconst useStyles = makeStyles({\n    root: {\n        minHeight: 250,\n    }\n});\n\nconst GameSummary = ({rounds, all_tags}: GameSummaryProps) => {\n    const dispatch = useThunkDispatch();\n    const classes = useStyles();\n\n    const round_summary = (round: Round, index: number) => {\n        return (\n            <Grid key={index} item className=\"round-summary\" xs={12} sm={6} md={4}>\n                <Card classes={classes}>\n                    <CardActionArea href={SAKUGABOORU_TAG_URL + round.tag.name.replaceAll(\" \", \"_\")} target=\"_blank\">\n                        <CardMedia\n                            component=\"img\"\n                            title={\"Image thumbnail of a clip from \" + round.videos[0].tags[0].name}\n                            alt={\"Image thumbnail of a clip from \" + round.videos[0].tags[0].name}\n                            image={round.videos[0].preview_url}\n                        />\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                {round.tag.name}\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\">\n                                {render_guess(round.guess)}\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    }    \n\n    return (\n        <Container>\n            <Grid container spacing={2}>\n                {rounds.map(round_summary)}\n            </Grid>\n            <div id=\"play-again\">\n                <Button\n                    variant=\"contained\"\n                    onClick={() => dispatch(start(choose_random_tags(all_tags)))}\n                    color=\"primary\"\n                >\n                        Play Again\n                </Button>\n            </div>\n        </Container>\n    )\n}\n\nexport default GameSummary;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport appReducer from '../appSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { lightBlue, red } from '@material-ui/core/colors';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { CssBaseline } from '@material-ui/core';\n\nexport const dark_theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: lightBlue,\n    secondary: red\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={dark_theme}>\n      <CssBaseline />\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}